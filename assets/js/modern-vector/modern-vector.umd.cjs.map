{"version":3,"file":"modern-vector.umd.cjs","sources":["../src/plugins/renderers/canvas/canvas-renderer.ts","../src/plugins/renderers/svg/svg-renderer.ts","../src/plugins/core/math/vector.ts","../src/plugins/core/math/matrix.ts","../src/plugins/core/shapes/abstract-shape.ts","../src/plugins/core/shapes/rectangle.ts","../src/plugins/core/shapes/circle.ts","../src/plugins/core/shapes/shape-plugin.ts","../src/core/services/renderer.ts","../src/core/services/events.ts","../src/core/services/scene.ts","../src/core/engine.ts"],"sourcesContent":["import { Renderer, RendererCapabilities, CanvasRendererOptions } from '../types';\nimport { Scene } from '../../../core/types';\nimport { Shape } from '../../core/shapes/types';\n\n/**\n * Canvas renderer implementation\n */\nexport class CanvasRenderer implements Renderer {\n  readonly id = 'canvas';\n  readonly capabilities: RendererCapabilities = {\n    maxTextureSize: 4096,\n    supportsSVG: false,\n    supportsWebGL: false,\n    supports3D: false\n  };\n\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private options: Required<CanvasRendererOptions>;\n  private displaySize: { width: number; height: number } = { width: 0, height: 0 };\n\n  constructor(options: CanvasRendererOptions = {}) {\n    this.options = {\n      context: {\n        canvas: options.context?.canvas || document.createElement('canvas'),\n        contextType: options.context?.contextType || '2d',\n        contextAttributes: options.context?.contextAttributes || {}\n      },\n      antialias: options.antialias ?? true,\n      alpha: options.alpha ?? true,\n      autoClear: options.autoClear ?? true,\n      backgroundColor: options.backgroundColor || 'transparent',\n      pixelRatio: options.pixelRatio || 1\n    };\n\n    this.canvas = this.options.context.canvas;\n    const context = this.canvas.getContext('2d', {\n      alpha: this.options.alpha,\n      ...this.options.context.contextAttributes\n    });\n\n    if (!context) {\n      throw new Error('Failed to get 2D context');\n    }\n\n    this.context = context;\n\n    // Enable antialiasing\n    if (this.options.antialias) {\n      this.context.imageSmoothingEnabled = true;\n      this.context.imageSmoothingQuality = 'high';\n    }\n\n    // Set initial size\n    this.setSize(this.canvas.width, this.canvas.height);\n  }\n\n  /**\n   * Canvas element 가져오기\n   */\n  getCanvas(): HTMLCanvasElement {\n    return this.canvas;\n  }\n\n  /**\n   * Canvas context 가져오기\n   */\n  getContext(): CanvasRenderingContext2D {\n    return this.context;\n  }\n\n  /**\n   * Canvas 크기 설정\n   * @param width - Canvas 너비\n   * @param height - Canvas 높이\n   */\n  setSize(width: number, height: number): void {\n    const ratio = this.options.pixelRatio;\n\n    // Set display size\n    this.displaySize = {\n      width,\n      height\n    };\n\n    // Set actual size in memory\n    this.canvas.width = width * ratio;\n    this.canvas.height = height * ratio;\n\n    // Reset context state\n    this.context.setTransform(1, 0, 0, 1, 0, 0);\n\n    // Scale context to match pixel ratio\n    this.context.scale(ratio, ratio);\n\n    // Reset context state\n    this.context.imageSmoothingEnabled = this.options.antialias;\n    this.context.imageSmoothingQuality = 'high';\n  }\n\n  /**\n   * Scene 렌더링\n   * @param scene - 렌더링할 Scene\n   */\n  render(scene: Scene): void {\n    // Clear canvas if needed\n    if (this.options.autoClear) {\n      this.clear();\n    }\n\n    // Save context state\n    this.context.save();\n\n    // Render each shape\n    scene.root.childNodes.forEach(node => {\n      const shape = node as unknown as Shape;\n      this.renderShape(shape);\n    });\n\n    // Restore context state\n    this.context.restore();\n  }\n\n  /**\n   * Shape 렌더링\n   * @param shape - 렌더링할 Shape\n   */\n  private renderShape(shape: Shape): void {\n    // Save context state\n    this.context.save();\n\n    // Apply transform\n    const matrix = shape.transform.values;\n    this.context.transform(\n      matrix[0], matrix[3], // a, b\n      matrix[1], matrix[4], // c, d\n      matrix[2], matrix[5]  // e, f\n    );\n\n    // Apply style\n    if (shape.style.fillColor) {\n      this.context.fillStyle = shape.style.fillColor;\n    }\n    if (shape.style.strokeColor) {\n      this.context.strokeStyle = shape.style.strokeColor;\n    }\n    if (shape.style.strokeWidth) {\n      this.context.lineWidth = shape.style.strokeWidth;\n    }\n    if (shape.style.strokeDashArray) {\n      this.context.setLineDash(shape.style.strokeDashArray);\n    }\n    if (shape.style.strokeDashOffset) {\n      this.context.lineDashOffset = shape.style.strokeDashOffset;\n    }\n    if (shape.style.strokeLineCap) {\n      this.context.lineCap = shape.style.strokeLineCap;\n    }\n    if (shape.style.strokeLineJoin) {\n      this.context.lineJoin = shape.style.strokeLineJoin;\n    }\n    if (shape.style.strokeMiterLimit) {\n      this.context.miterLimit = shape.style.strokeMiterLimit;\n    }\n    if (shape.style.fillOpacity !== undefined) {\n      this.context.globalAlpha = shape.style.fillOpacity;\n    }\n\n    // Draw shape based on type\n    switch (shape.type) {\n      case 'rectangle':\n        this.renderRectangle(shape);\n        break;\n      case 'circle':\n        this.renderCircle(shape);\n        break;\n      case 'line':\n        this.renderLine(shape);\n        break;\n      case 'path':\n        this.renderPath(shape);\n        break;\n      case 'text':\n        this.renderText(shape);\n        break;\n    }\n\n    // Restore context state\n    this.context.restore();\n  }\n\n  /**\n   * Rectangle 렌더링\n   * @param shape - 렌더링할 Rectangle\n   */\n  private renderRectangle(shape: Shape): void {\n    const bounds = shape.bounds;\n    if (shape.style.fillColor) {\n      this.context.fillRect(bounds.x, bounds.y, bounds.width, bounds.height);\n    }\n    if (shape.style.strokeColor) {\n      this.context.strokeRect(bounds.x, bounds.y, bounds.width, bounds.height);\n    }\n  }\n\n  /**\n   * Circle 렌더링\n   * @param shape - 렌더링할 Circle\n   */\n  private renderCircle(shape: Shape): void {\n    const bounds = shape.bounds;\n    const centerX = bounds.x + bounds.width / 2;\n    const centerY = bounds.y + bounds.height / 2;\n    const radius = bounds.width / 2;\n\n    this.context.beginPath();\n    this.context.arc(centerX, centerY, radius, 0, Math.PI * 2);\n    \n    if (shape.style.fillColor) {\n      this.context.fill();\n    }\n    if (shape.style.strokeColor) {\n      this.context.stroke();\n    }\n  }\n\n  /**\n   * Line 렌더링\n   * @param shape - 렌더링할 Line\n   */\n  private renderLine(shape: Shape): void {\n    const bounds = shape.bounds;\n    this.context.beginPath();\n    this.context.moveTo(bounds.x, bounds.y);\n    this.context.lineTo(bounds.x + bounds.width, bounds.y + bounds.height);\n    \n    if (shape.style.strokeColor) {\n      this.context.stroke();\n    }\n  }\n\n  /**\n   * Path 렌더링\n   * @param shape - 렌더링할 Path\n   */\n  private renderPath(shape: Shape): void {\n    if (!shape.points) return;\n\n    this.context.beginPath();\n    shape.points.forEach((point, index) => {\n      if (point.type === 'move' || index === 0) {\n        this.context.moveTo(point.x, point.y);\n      } else {\n        this.context.lineTo(point.x, point.y);\n      }\n    });\n\n    if (shape.style.fillColor) {\n      this.context.fill();\n    }\n    if (shape.style.strokeColor) {\n      this.context.stroke();\n    }\n  }\n\n  /**\n   * Text 렌더링\n   * @param shape - 렌더링할 Text\n   */\n  private renderText(shape: Shape): void {\n    if (!shape.text) return;\n\n    if (shape.font && shape.fontSize) {\n      this.context.font = `${shape.fontSize}px ${shape.font}`;\n    }\n    if (shape.textAlign) {\n      this.context.textAlign = shape.textAlign;\n    }\n    if (shape.textBaseline) {\n      this.context.textBaseline = shape.textBaseline;\n    }\n\n    const bounds = shape.bounds;\n    if (shape.style.fillColor) {\n      this.context.fillText(shape.text, bounds.x, bounds.y);\n    }\n    if (shape.style.strokeColor) {\n      this.context.strokeText(shape.text, bounds.x, bounds.y);\n    }\n  }\n\n  /**\n   * Canvas 클리어\n   */\n  clear(): void {\n    this.context.save();\n    this.context.setTransform(1, 0, 0, 1, 0, 0);\n    \n    if (this.options.backgroundColor === 'transparent') {\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    } else {\n      this.context.fillStyle = this.options.backgroundColor;\n      this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    this.context.restore();\n  }\n\n  /**\n   * 리소스 정리\n   */\n  dispose(): void {\n    // Clear canvas\n    this.clear();\n\n    // Remove canvas from DOM if it was created by us\n    if (!this.options.context.canvas.parentNode) {\n      if (typeof this.canvas.remove === 'function') {\n        this.canvas.remove();\n      }\n    }\n  }\n} ","import { Renderer, RendererCapabilities, SVGRendererOptions } from '../types';\nimport { Scene } from '../../../core/types';\nimport { Shape } from '../../core/shapes/types';\n\n/**\n * SVG renderer implementation\n */\nexport class SVGRenderer implements Renderer {\n  readonly id = 'svg';\n  readonly capabilities: RendererCapabilities = {\n    maxTextureSize: Infinity,\n    supportsSVG: true,\n    supportsWebGL: false,\n    supports3D: false\n  };\n\n  private svg: SVGSVGElement;\n  private options: Required<SVGRendererOptions>;\n  private displaySize: { width: number; height: number } = { width: 0, height: 0 };\n  private readonly svgNS: string;\n\n  constructor(options: SVGRendererOptions = {}) {\n    this.svgNS = options.context?.namespace || 'http://www.w3.org/2000/svg';\n    this.options = {\n      context: {\n        svg: options.context?.svg || document.createElementNS(this.svgNS, 'svg') as SVGSVGElement,\n        namespace: this.svgNS\n      },\n      antialias: options.antialias ?? true,\n      alpha: options.alpha ?? true,\n      autoClear: options.autoClear ?? true,\n      backgroundColor: options.backgroundColor || 'transparent',\n      pixelRatio: options.pixelRatio || 1,\n      width: options.width || 100,\n      height: options.height || 100,\n      viewBox: options.viewBox || {\n        x: 0,\n        y: 0,\n        width: options.width || 100,\n        height: options.height || 100\n      },\n      preserveAspectRatio: options.preserveAspectRatio || 'xMidYMid meet'\n    };\n\n    this.svg = this.options.context.svg!;\n\n    // Set initial size\n    this.setSize(this.options.width, this.options.height);\n  }\n\n  /**\n   * SVG element 가져오기\n   */\n  getSVG(): SVGSVGElement {\n    return this.svg;\n  }\n\n  /**\n   * SVG 크기 설정\n   * @param width - SVG 너비\n   * @param height - SVG 높이\n   */\n  setSize(width: number, height: number): void {\n    const ratio = this.options.pixelRatio;\n\n    // Set display size\n    this.displaySize = {\n      width,\n      height\n    };\n\n    // Set actual size\n    this.svg.setAttribute('width', `${width * ratio}`);\n    this.svg.setAttribute('height', `${height * ratio}`);\n\n    // Set viewBox\n    const viewBox = this.options.viewBox;\n    this.svg.setAttribute('viewBox', `${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`);\n\n    // Set preserveAspectRatio\n    this.svg.setAttribute('preserveAspectRatio', this.options.preserveAspectRatio);\n  }\n\n  /**\n   * Scene 렌더링\n   * @param scene - 렌더링할 Scene\n   */\n  render(scene: Scene): void {\n    // Clear SVG if needed\n    if (this.options.autoClear) {\n      this.clear();\n    }\n\n    // Render each shape\n    scene.root.childNodes.forEach(node => {\n      const shape = node as unknown as Shape;\n      this.renderShape(shape);\n    });\n  }\n\n  /**\n   * Shape 렌더링\n   * @param shape - 렌더링할 Shape\n   */\n  private renderShape(shape: Shape): void {\n    let element: SVGElement;\n\n    // Create shape element based on type\n    switch (shape.type) {\n      case 'rectangle':\n        element = this.renderRectangle(shape);\n        break;\n      case 'circle':\n        element = this.renderCircle(shape);\n        break;\n      case 'line':\n        element = this.renderLine(shape);\n        break;\n      case 'path':\n        element = this.renderPath(shape);\n        break;\n      case 'text':\n        element = this.renderText(shape);\n        break;\n      default:\n        return;\n    }\n\n    // Apply transform\n    const matrix = shape.transform.values;\n    element.setAttribute('transform', `matrix(${matrix[0]},${matrix[1]},${matrix[3]},${matrix[4]},${matrix[2]},${matrix[5]})`);\n\n    // Apply style\n    if (shape.style.fillColor) {\n      element.setAttribute('fill', shape.style.fillColor);\n    }\n    if (shape.style.strokeColor) {\n      element.setAttribute('stroke', shape.style.strokeColor);\n    }\n    if (shape.style.strokeWidth) {\n      element.setAttribute('stroke-width', shape.style.strokeWidth.toString());\n    }\n    if (shape.style.strokeDashArray) {\n      element.setAttribute('stroke-dasharray', shape.style.strokeDashArray.join(','));\n    }\n    if (shape.style.strokeDashOffset) {\n      element.setAttribute('stroke-dashoffset', shape.style.strokeDashOffset.toString());\n    }\n    if (shape.style.strokeLineCap) {\n      element.setAttribute('stroke-linecap', shape.style.strokeLineCap);\n    }\n    if (shape.style.strokeLineJoin) {\n      element.setAttribute('stroke-linejoin', shape.style.strokeLineJoin);\n    }\n    if (shape.style.strokeMiterLimit) {\n      element.setAttribute('stroke-miterlimit', shape.style.strokeMiterLimit.toString());\n    }\n    if (shape.style.fillOpacity !== undefined) {\n      element.setAttribute('fill-opacity', shape.style.fillOpacity.toString());\n    }\n\n    // Add to SVG\n    this.svg.appendChild(element);\n  }\n\n  /**\n   * Rectangle 렌더링\n   * @param shape - 렌더링할 Rectangle\n   */\n  private renderRectangle(shape: Shape): SVGRectElement {\n    const rect = document.createElementNS(this.svgNS, 'rect') as SVGRectElement;\n    const bounds = shape.bounds;\n    rect.setAttribute('x', bounds.x.toString());\n    rect.setAttribute('y', bounds.y.toString());\n    rect.setAttribute('width', bounds.width.toString());\n    rect.setAttribute('height', bounds.height.toString());\n    return rect;\n  }\n\n  /**\n   * Circle 렌더링\n   * @param shape - 렌더링할 Circle\n   */\n  private renderCircle(shape: Shape): SVGCircleElement {\n    const circle = document.createElementNS(this.svgNS, 'circle') as SVGCircleElement;\n    const bounds = shape.bounds;\n    const centerX = bounds.x + bounds.width / 2;\n    const centerY = bounds.y + bounds.height / 2;\n    const radius = bounds.width / 2;\n    circle.setAttribute('cx', centerX.toString());\n    circle.setAttribute('cy', centerY.toString());\n    circle.setAttribute('r', radius.toString());\n    return circle;\n  }\n\n  /**\n   * Line 렌더링\n   * @param shape - 렌더링할 Line\n   */\n  private renderLine(shape: Shape): SVGLineElement {\n    const line = document.createElementNS(this.svgNS, 'line') as SVGLineElement;\n    const bounds = shape.bounds;\n    line.setAttribute('x1', bounds.x.toString());\n    line.setAttribute('y1', bounds.y.toString());\n    line.setAttribute('x2', (bounds.x + bounds.width).toString());\n    line.setAttribute('y2', (bounds.y + bounds.height).toString());\n    return line;\n  }\n\n  /**\n   * Path 렌더링\n   * @param shape - 렌더링할 Path\n   */\n  private renderPath(shape: Shape): SVGPathElement {\n    const path = document.createElementNS(this.svgNS, 'path') as SVGPathElement;\n    if (!shape.points) return path;\n\n    let d = '';\n    shape.points.forEach((point, index) => {\n      if (point.type === 'move' || index === 0) {\n        d += `M ${point.x} ${point.y}`;\n      } else {\n        d += `L ${point.x} ${point.y}`;\n      }\n    });\n    path.setAttribute('d', d);\n    return path;\n  }\n\n  /**\n   * Text 렌더링\n   * @param shape - 렌더링할 Text\n   */\n  private renderText(shape: Shape): SVGTextElement {\n    const text = document.createElementNS(this.svgNS, 'text') as SVGTextElement;\n    if (!shape.text) return text;\n\n    const bounds = shape.bounds;\n    text.setAttribute('x', bounds.x.toString());\n    text.setAttribute('y', bounds.y.toString());\n\n    if (shape.font) {\n      text.setAttribute('font-family', shape.font);\n    }\n    if (shape.fontSize) {\n      text.setAttribute('font-size', shape.fontSize.toString());\n    }\n    if (shape.textAlign) {\n      text.setAttribute('text-anchor', this.getTextAnchor(shape.textAlign));\n    }\n    if (shape.textBaseline) {\n      text.setAttribute('dominant-baseline', this.getDominantBaseline(shape.textBaseline));\n    }\n\n    text.textContent = shape.text;\n    return text;\n  }\n\n  /**\n   * SVG text-anchor 값 가져오기\n   * @param textAlign - Text 정렬\n   */\n  private getTextAnchor(textAlign: string): string {\n    switch (textAlign) {\n      case 'center':\n        return 'middle';\n      case 'right':\n        return 'end';\n      default:\n        return 'start';\n    }\n  }\n\n  /**\n   * SVG dominant-baseline 값 가져오기\n   * @param textBaseline - Text 기준선\n   */\n  private getDominantBaseline(textBaseline: string): string {\n    switch (textBaseline) {\n      case 'middle':\n        return 'central';\n      case 'bottom':\n        return 'text-after-edge';\n      default:\n        return 'text-before-edge';\n    }\n  }\n\n  /**\n   * SVG 클리어\n   */\n  clear(): void {\n    // Remove all child nodes\n    while (this.svg.firstChild) {\n      this.svg.removeChild(this.svg.firstChild);\n    }\n\n    // Set background color if needed\n    if (this.options.backgroundColor !== 'transparent') {\n      const rect = document.createElementNS(this.svgNS, 'rect');\n      rect.setAttribute('x', '0');\n      rect.setAttribute('y', '0');\n      rect.setAttribute('width', '100%');\n      rect.setAttribute('height', '100%');\n      rect.setAttribute('fill', this.options.backgroundColor);\n      this.svg.appendChild(rect);\n    }\n  }\n\n  /**\n   * 리소스 정리\n   */\n  dispose(): void {\n    // Clear SVG\n    this.clear();\n\n    // Remove SVG from DOM if it was created by us\n    if (this.options.context.svg && !this.options.context.svg.parentNode) {\n      this.svg.remove();\n    }\n  }\n} ","/**\n * 2D Vector implementation\n * 벡터의 불변성을 보장하기 위해 모든 연산은 새로운 벡터를 반환\n */\nexport class Vector2D {\n  private constructor(\n    readonly x: number,\n    readonly y: number\n  ) {\n    // Convert -0 to +0\n    this.x = this.x === 0 ? 0 : this.x;\n    this.y = this.y === 0 ? 0 : this.y;\n  }\n\n  /**\n   * Create a new 2D vector\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @returns A new Vector2D instance\n   */\n  static create(x: number = 0, y: number = 0): Vector2D {\n    return new Vector2D(x, y);\n  }\n\n  /**\n   * Add another vector to this one\n   * @param other - Vector to add\n   * @returns A new vector representing the sum\n   */\n  add(other: Vector2D): Vector2D {\n    return new Vector2D(this.x + other.x, this.y + other.y);\n  }\n\n  /**\n   * Subtract another vector from this one\n   * @param other - Vector to subtract\n   * @returns A new vector representing the difference\n   */\n  subtract(other: Vector2D): Vector2D {\n    return new Vector2D(this.x - other.x, this.y - other.y);\n  }\n\n  /**\n   * Scale the vector by a scalar value\n   * @param scalar - Scale factor\n   * @returns A new scaled vector\n   */\n  scale(scalar: number): Vector2D {\n    return new Vector2D(this.x * scalar, this.y * scalar);\n  }\n\n  /**\n   * Calculate the dot product with another vector\n   * @param other - Vector to calculate dot product with\n   * @returns The dot product value\n   */\n  dot(other: Vector2D): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  /**\n   * Get the length (magnitude) of the vector\n   */\n  get length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  /**\n   * Get a normalized (unit length) version of the vector\n   * @returns A new normalized vector\n   */\n  normalize(): Vector2D {\n    const len = this.length;\n    if (len === 0) return Vector2D.create(0, 0);\n    return this.scale(1 / len);\n  }\n\n  /**\n   * Calculate the angle between this vector and another\n   * @param other - Vector to calculate angle with\n   * @returns Angle in radians\n   */\n  angle(other: Vector2D): number {\n    const dot = this.dot(other);\n    const cos = dot / (this.length * other.length);\n    return Math.acos(Math.min(Math.max(cos, -1), 1));\n  }\n\n  /**\n   * Rotate the vector by an angle\n   * @param angle - Angle in radians\n   * @returns A new rotated vector\n   */\n  rotate(angle: number): Vector2D {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    return new Vector2D(\n      this.x * cos - this.y * sin,\n      this.x * sin + this.y * cos\n    );\n  }\n\n  /**\n   * Get a perpendicular vector\n   * @returns A new vector perpendicular to this one\n   */\n  perpendicular(): Vector2D {\n    // Convert -0 to +0 when creating new vector\n    const x = -this.y === 0 ? 0 : -this.y;\n    const y = this.x === 0 ? 0 : this.x;\n    return new Vector2D(x, y);\n  }\n\n  /**\n   * Calculate the distance to another vector\n   * @param other - Vector to calculate distance to\n   * @returns The distance between the vectors\n   */\n  distanceTo(other: Vector2D): number {\n    return this.subtract(other).length;\n  }\n} ","/**\n * 3x3 Matrix implementation\n * 행렬의 불변성을 보장하기 위해 모든 연산은 새로운 행렬을 반환\n */\nexport class Matrix3x3 {\n  private constructor(\n    private _values: number[]\n  ) {\n    if (_values.length !== 9) {\n      throw new Error('Matrix3x3 requires exactly 9 values');\n    }\n  }\n\n  /**\n   * Get matrix values\n   */\n  get values(): number[] {\n    return [...this._values];\n  }\n\n  /**\n   * Create a new 3x3 matrix\n   * @param values - Optional array of 9 values (row-major order)\n   * @returns A new Matrix3x3 instance\n   */\n  static create(values?: number[]): Matrix3x3 {\n    if (!values) {\n      return new Matrix3x3([\n        1, 0, 0,\n        0, 1, 0,\n        0, 0, 1\n      ]);\n    }\n    return new Matrix3x3([...values]);\n  }\n\n  /**\n   * Create a translation matrix\n   * @param tx - X translation\n   * @param ty - Y translation\n   * @returns A new translation matrix\n   */\n  static translation(tx: number, ty: number): Matrix3x3 {\n    return new Matrix3x3([\n      1, 0, tx,\n      0, 1, ty,\n      0, 0, 1\n    ]);\n  }\n\n  /**\n   * Create a rotation matrix\n   * @param angle - Rotation angle in radians\n   * @returns A new rotation matrix\n   */\n  static rotation(angle: number): Matrix3x3 {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    return new Matrix3x3([\n      cos, -sin, 0,\n      sin, cos, 0,\n      0, 0, 1\n    ]);\n  }\n\n  /**\n   * Create a scale matrix\n   * @param sx - X scale factor\n   * @param sy - Y scale factor\n   * @returns A new scale matrix\n   */\n  static scale(sx: number, sy: number): Matrix3x3 {\n    return new Matrix3x3([\n      sx, 0, 0,\n      0, sy, 0,\n      0, 0, 1\n    ]);\n  }\n\n  /**\n   * Multiply this matrix with another\n   * @param other - Matrix to multiply with\n   * @returns A new matrix representing the product\n   */\n  multiply(other: Matrix3x3): Matrix3x3 {\n    const a = this._values;\n    const b = other._values;\n    const result = new Array(9);\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        let sum = 0;\n        for (let k = 0; k < 3; k++) {\n          sum += a[i * 3 + k] * b[k * 3 + j];\n        }\n        result[i * 3 + j] = sum;\n      }\n    }\n\n    return new Matrix3x3(result);\n  }\n\n  /**\n   * Calculate the determinant of this matrix\n   * @returns The determinant value\n   */\n  determinant(): number {\n    const [a00, a01, a02, a10, a11, a12, a20, a21, a22] = this._values;\n    \n    return (\n      a00 * (a11 * a22 - a12 * a21) -\n      a01 * (a10 * a22 - a12 * a20) +\n      a02 * (a10 * a21 - a11 * a20)\n    );\n  }\n\n  /**\n   * Calculate the inverse of this matrix\n   * @returns A new matrix representing the inverse\n   * @throws Error if matrix is not invertible\n   */\n  inverse(): Matrix3x3 {\n    const det = this.determinant();\n    if (Math.abs(det) < 1e-6) {\n      throw new Error('Matrix is not invertible');\n    }\n\n    const [a00, a01, a02, a10, a11, a12, a20, a21, a22] = this._values;\n    \n    // Calculate cofactor matrix\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a02 * a21 - a01 * a22;\n    const b02 = a01 * a12 - a02 * a11;\n    const b10 = a12 * a20 - a10 * a22;\n    const b11 = a00 * a22 - a02 * a20;\n    const b12 = a02 * a10 - a00 * a12;\n    const b20 = a10 * a21 - a11 * a20;\n    const b21 = a01 * a20 - a00 * a21;\n    const b22 = a00 * a11 - a01 * a10;\n\n    // Divide by determinant\n    const invDet = 1 / det;\n    return new Matrix3x3([\n      b00 * invDet, b01 * invDet, b02 * invDet,\n      b10 * invDet, b11 * invDet, b12 * invDet,\n      b20 * invDet, b21 * invDet, b22 * invDet\n    ]);\n  }\n} ","import { Matrix3x3 } from '../math/matrix';\nimport { Vector2D } from '../math/vector';\nimport { Shape, ShapeStyle, Bounds, ShapeOptions } from './types';\nimport { PathPoint } from './path/types';\n\n/**\n * Scale 기준점 타입\n */\nexport type ScaleOrigin = 'center' | 'topLeft' | 'custom';\n\n/**\n * Shape의 공통 기능을 구현한 추상 클래스\n */\nexport abstract class AbstractShape implements Shape {\n  readonly id: string;\n  readonly type: string;\n  readonly transform: Matrix3x3;\n  readonly style: ShapeStyle;\n  protected scaleOrigin: ScaleOrigin;\n  protected customScaleOrigin?: { x: number; y: number };\n\n  constructor(type: string, options: ShapeOptions = {}) {\n    this.id = options.id || crypto.randomUUID();\n    this.type = type;\n    this.transform = options.transform || Matrix3x3.create();\n    this.style = options.style || {};\n    this.scaleOrigin = options.scaleOrigin || 'topLeft';\n    this.customScaleOrigin = options.customScaleOriginPoint;\n  }\n\n  /**\n   * Scale 기준점 설정\n   * @param origin - Scale 기준점 ('center', 'topLeft', 'custom')\n   * @param point - Custom 기준점일 경우 좌표\n   */\n  setScaleOrigin(origin: ScaleOrigin, point?: { x: number; y: number }): void {\n    this.scaleOrigin = origin;\n    if (origin === 'custom' && point) {\n      this.customScaleOrigin = point;\n    }\n  }\n\n  /**\n   * Scale 기준점 가져오기\n   * @returns Scale 기준점 좌표\n   */\n  protected abstract getLocalBounds(): Bounds;\n\n  /**\n   * Scale 기준점 가져오기\n   * @returns Scale 기준점 좌표\n   */\n  protected getScaleOriginPoint(): { x: number; y: number } {\n    const localBounds = this.getLocalBounds();\n    \n    switch (this.scaleOrigin) {\n      case 'center':\n        return {\n          x: localBounds.x + localBounds.width / 2,\n          y: localBounds.y + localBounds.height / 2\n        };\n      case 'topLeft':\n        return {\n          x: localBounds.x,\n          y: localBounds.y\n        };\n      case 'custom':\n        return this.customScaleOrigin || this.getScaleOriginPoint();\n      default:\n        return this.getScaleOriginPoint();\n    }\n  }\n\n  /**\n   * Shape의 경계 상자 계산\n   */\n  abstract get bounds(): Bounds;\n\n  /**\n   * Shape 복제\n   */\n  abstract clone(): Shape;\n\n  /**\n   * Shape에 변환 적용\n   * @param matrix - 적용할 변환 행렬\n   */\n  abstract applyTransform(matrix: Matrix3x3): Shape;\n\n  /**\n   * Point가 Shape 내부에 있는지 확인\n   * @param point - 확인할 점\n   */\n  abstract containsPoint(point: Vector2D): boolean;\n\n  /**\n   * Shape를 Path로 변환\n   */\n  abstract toPath(): PathPoint[];\n\n  /**\n   * 기본 충돌 검사 구현 (Bounds 기반)\n   * @param other - 충돌 검사할 다른 Shape\n   */\n  intersects(other: Shape): boolean {\n    const b1 = this.bounds;\n    const b2 = other.bounds;\n\n    return !(\n      b2.x > b1.x + b1.width ||\n      b2.x + b2.width < b1.x ||\n      b2.y > b1.y + b1.height ||\n      b2.y + b2.height < b1.y\n    );\n  }\n\n  /**\n   * Scale 행렬 추출\n   * @param matrix - Scale을 추출할 행렬 (기본값: this.transform)\n   */\n  protected getTransformScale(matrix: Matrix3x3 = this.transform): { scaleX: number; scaleY: number } {\n    const scaleX = Math.sqrt(\n      matrix.values[0] * matrix.values[0] +\n      matrix.values[1] * matrix.values[1]\n    );\n    const scaleY = Math.sqrt(\n      matrix.values[3] * matrix.values[3] +\n      matrix.values[4] * matrix.values[4]\n    );\n    return { scaleX, scaleY };\n  }\n\n  /**\n   * 지정된 기준점으로 변환 행렬 계산\n   * @param matrix - 적용할 변환 행렬\n   * @param originX - 기준점 X 좌표\n   * @param originY - 기준점 Y 좌표\n   */\n  protected getTransformAroundPoint(\n    matrix: Matrix3x3,\n    originX: number,\n    originY: number\n  ): Matrix3x3 {\n    const originTransform = Matrix3x3.translation(originX, originY);\n    const inverseOriginTransform = Matrix3x3.translation(-originX, -originY);\n    \n    // 변환 순서: 기존 변환 -> 원점으로 이동 -> 스케일 적용 -> 원점 복귀\n    return originTransform\n      .multiply(matrix)\n      .multiply(inverseOriginTransform)\n      .multiply(this.transform);\n  }\n} ","import { Vector2D } from '../math/vector';\nimport { Matrix3x3 } from '../math/matrix';\nimport { Shape, ShapeStyle, Bounds, ShapeFactory, ShapeOptions } from './types';\nimport { AbstractShape } from './abstract-shape';\nimport { PathPoint } from './path/types';\n\n/**\n * Rectangle shape options\n */\nexport interface RectangleOptions extends ShapeOptions {\n  /** Rectangle의 x 좌표 */\n  x?: number;\n  /** Rectangle의 y 좌표 */\n  y?: number;\n  /** Rectangle의 너비 */\n  width?: number;\n  /** Rectangle의 높이 */\n  height?: number;\n}\n\n/**\n * Rectangle shape implementation\n */\nexport class Rectangle extends AbstractShape {\n  private _x: number;\n  private _y: number;\n  private _width: number;\n  private _height: number;\n\n  constructor(options: RectangleOptions = {}) {\n    super('rectangle', options);\n    \n    this._x = options.x || 0;\n    this._y = options.y || 0;\n    this._width = options.width || 0;\n    this._height = options.height || 0;\n  }\n\n  protected getLocalBounds(): Bounds {\n    return {\n      x: this._x,\n      y: this._y,\n      width: this._width,\n      height: this._height\n    };\n  }\n\n  get bounds(): Bounds {\n    // Transform 적용된 corner points 계산\n    const corners = [\n      Vector2D.create(this._x, this._y),\n      Vector2D.create(this._x + this._width, this._y),\n      Vector2D.create(this._x + this._width, this._y + this._height),\n      Vector2D.create(this._x, this._y + this._height)\n    ].map(p => {\n      const transformed = this.transform.multiply(Matrix3x3.translation(p.x, p.y));\n      return Vector2D.create(transformed.values[2], transformed.values[5]);\n    });\n\n    // Find min/max points\n    const xs = corners.map(p => p.x);\n    const ys = corners.map(p => p.y);\n    const minX = Math.min(...xs);\n    const minY = Math.min(...ys);\n    const maxX = Math.max(...xs);\n    const maxY = Math.max(...ys);\n\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  }\n\n  clone(): Shape {\n    return new Rectangle({\n      id: crypto.randomUUID(),\n      transform: Matrix3x3.create(this.transform.values),\n      style: { ...this.style },\n      x: this._x,\n      y: this._y,\n      width: this._width,\n      height: this._height\n    });\n  }\n\n  applyTransform(matrix: Matrix3x3): Shape {\n    // Scale 변환인 경우 지정된 기준점을 사용\n    const scale = this.getTransformScale(matrix);\n    if (scale.scaleX !== 1 || scale.scaleY !== 1) {\n      let origin;\n      switch (this.scaleOrigin) {\n        case 'center':\n          origin = {\n            x: this._x + this._width / 2,\n            y: this._y + this._height / 2\n          };\n          break;\n        case 'custom':\n          origin = this.customScaleOrigin || {\n            x: this._x,\n            y: this._y\n          };\n          break;\n        default:\n          origin = {\n            x: this._x,\n            y: this._y\n          };\n      }\n      return new Rectangle({\n        id: this.id,\n        transform: this.getTransformAroundPoint(matrix, origin.x, origin.y),\n        style: { ...this.style },\n        x: this._x,\n        y: this._y,\n        width: this._width,\n        height: this._height,\n        scaleOrigin: this.scaleOrigin,\n        customScaleOriginPoint: this.customScaleOrigin\n      });\n    }\n\n    // Scale이 아닌 변환은 기존 transform에 직접 적용\n    return new Rectangle({\n      id: this.id,\n      transform: matrix.multiply(this.transform),\n      style: { ...this.style },\n      x: this._x,\n      y: this._y,\n      width: this._width,\n      height: this._height,\n      scaleOrigin: this.scaleOrigin,\n      customScaleOriginPoint: this.customScaleOrigin\n    });\n  }\n\n  containsPoint(point: Vector2D): boolean {\n    // Transform point to local coordinates\n    const inverse = this.transform.inverse();\n    const local = inverse.multiply(Matrix3x3.translation(point.x, point.y));\n    const x = local.values[2];\n    const y = local.values[5];\n\n    return (\n      x >= this._x &&\n      x <= this._x + this._width &&\n      y >= this._y &&\n      y <= this._y + this._height\n    );\n  }\n\n  intersects(other: Shape): boolean {\n    // Simple bounds intersection check\n    const b1 = this.bounds;\n    const b2 = other.bounds;\n\n    return !(\n      b2.x > b1.x + b1.width ||\n      b2.x + b2.width < b1.x ||\n      b2.y > b1.y + b1.height ||\n      b2.y + b2.height < b1.y\n    );\n  }\n\n  /**\n   * Rectangle을 Path로 변환\n   * @returns Path points\n   */\n  toPath(): PathPoint[] {\n    const bounds = this.bounds;\n    return [\n      { x: bounds.x, y: bounds.y, type: 'move' },\n      { x: bounds.x + bounds.width, y: bounds.y, type: 'line' },\n      { x: bounds.x + bounds.width, y: bounds.y + bounds.height, type: 'line' },\n      { x: bounds.x, y: bounds.y + bounds.height, type: 'line' },\n      { x: bounds.x, y: bounds.y, type: 'line' }\n    ];\n  }\n}\n\n/**\n * Rectangle factory\n */\nexport class RectangleFactory implements ShapeFactory<Rectangle> {\n  create(options: RectangleOptions): Rectangle {\n    return new Rectangle(options);\n  }\n} ","import { Vector2D } from '../math/vector';\nimport { Matrix3x3 } from '../math/matrix';\nimport { Shape, ShapeStyle, Bounds, ShapeFactory, ShapeOptions } from './types';\nimport { AbstractShape } from './abstract-shape';\nimport { PathPoint } from './path/types';\n\n/**\n * Circle shape options\n */\nexport interface CircleOptions extends ShapeOptions {\n  /** Circle의 중심 x 좌표 */\n  centerX?: number;\n  /** Circle의 중심 y 좌표 */\n  centerY?: number;\n  /** Circle의 반지름 */\n  radius?: number;\n}\n\n/**\n * Circle shape implementation\n */\nexport class Circle extends AbstractShape {\n  private _centerX: number;\n  private _centerY: number;\n  private _radius: number;\n\n  constructor(options: CircleOptions = {}) {\n    super('circle', options);\n    \n    this._centerX = options.centerX || 0;\n    this._centerY = options.centerY || 0;\n    this._radius = options.radius || 0;\n  }\n\n  protected getLocalBounds(): Bounds {\n    return {\n      x: this._centerX - this._radius,\n      y: this._centerY - this._radius,\n      width: this._radius * 2,\n      height: this._radius * 2\n    };\n  }\n\n  get bounds(): Bounds {\n    // Transform 적용된 center point 계산\n    const center = this.transform.multiply(Matrix3x3.translation(this._centerX, this._centerY));\n    const transformedX = center.values[2];\n    const transformedY = center.values[5];\n\n    // Scale 행렬 추출하여 radius 계산\n    const { scaleX, scaleY } = this.getTransformScale();\n    const transformedRadius = Math.max(scaleX, scaleY) * this._radius;\n\n    return {\n      x: transformedX - transformedRadius,\n      y: transformedY - transformedRadius,\n      width: transformedRadius * 2,\n      height: transformedRadius * 2\n    };\n  }\n\n  clone(): Shape {\n    return new Circle({\n      id: crypto.randomUUID(),\n      transform: Matrix3x3.create(this.transform.values),\n      style: { ...this.style },\n      centerX: this._centerX,\n      centerY: this._centerY,\n      radius: this._radius\n    });\n  }\n\n  applyTransform(matrix: Matrix3x3): Shape {\n    // Scale 변환인 경우 지정된 기준점을 사용\n    const scale = this.getTransformScale(matrix);\n    if (scale.scaleX !== 1 || scale.scaleY !== 1) {\n      let origin;\n      switch (this.scaleOrigin) {\n        case 'center':\n          origin = {\n            x: this._centerX,\n            y: this._centerY\n          };\n          break;\n        case 'custom':\n          origin = this.customScaleOrigin || {\n            x: this._centerX - this._radius,\n            y: this._centerY - this._radius\n          };\n          break;\n        default:\n          origin = {\n            x: this._centerX - this._radius,\n            y: this._centerY - this._radius\n          };\n      }\n      return new Circle({\n        id: this.id,\n        transform: this.getTransformAroundPoint(matrix, origin.x, origin.y),\n        style: { ...this.style },\n        centerX: this._centerX,\n        centerY: this._centerY,\n        radius: this._radius,\n        scaleOrigin: this.scaleOrigin,\n        customScaleOriginPoint: this.customScaleOrigin\n      });\n    }\n\n    // Scale이 아닌 변환은 기존 transform에 직접 적용\n    return new Circle({\n      id: this.id,\n      transform: matrix.multiply(this.transform),\n      style: { ...this.style },\n      centerX: this._centerX,\n      centerY: this._centerY,\n      radius: this._radius,\n      scaleOrigin: this.scaleOrigin,\n      customScaleOriginPoint: this.customScaleOrigin\n    });\n  }\n\n  containsPoint(point: Vector2D): boolean {\n    // Transform center point to world coordinates\n    const worldCenter = this.transform.multiply(Matrix3x3.translation(this._centerX, this._centerY));\n    const centerX = worldCenter.values[2];\n    const centerY = worldCenter.values[5];\n\n    // Calculate distance in world coordinates\n    const dx = point.x - centerX;\n    const dy = point.y - centerY;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n\n    // Scale 행렬 추출하여 radius 계산\n    const { scaleX, scaleY } = this.getTransformScale();\n    const transformedRadius = Math.max(scaleX, scaleY) * this._radius;\n\n    return distance <= transformedRadius;\n  }\n\n  intersects(other: Shape): boolean {\n    // Simple bounds intersection check for now\n    // 더 정확한 circle-specific 교차 검사는 나중에 구현\n    const b1 = this.bounds;\n    const b2 = other.bounds;\n\n    return !(\n      b2.x > b1.x + b1.width ||\n      b2.x + b2.width < b1.x ||\n      b2.y > b1.y + b1.height ||\n      b2.y + b2.height < b1.y\n    );\n  }\n\n  /**\n   * Circle을 Path로 변환\n   * @param segments - 원을 근사할 선분의 수 (기본값: 32)\n   * @returns Path points\n   */\n  toPath(segments: number = 32): PathPoint[] {\n    const bounds = this.bounds;\n    const centerX = bounds.x + bounds.width / 2;\n    const centerY = bounds.y + bounds.height / 2;\n    const radius = bounds.width / 2;\n    const points: PathPoint[] = [];\n\n    // 첫 점은 move\n    points.push({\n      x: centerX + radius,\n      y: centerY,\n      type: 'move'\n    });\n\n    // 나머지 점들은 line\n    for (let i = 1; i <= segments; i++) {\n      const angle = (i * 2 * Math.PI) / segments;\n      points.push({\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle),\n        type: 'line'\n      });\n    }\n\n    // 마지막 점은 시작점과 같게\n    points.push({\n      x: centerX + radius,\n      y: centerY,\n      type: 'line'\n    });\n\n    return points;\n  }\n}\n\n/**\n * Circle factory\n */\nexport class CircleFactory implements ShapeFactory<Circle> {\n  create(options: CircleOptions): Circle {\n    return new Circle(options);\n  }\n} ","import { Plugin, VectorEngine } from '../../../core/types';\nimport { Shape, ShapeFactory, ShapeOptions, ShapePlugin as IShapePlugin } from './types';\nimport { Rectangle, RectangleFactory } from './rectangle';\nimport { Circle, CircleFactory } from './circle';\n\n/**\n * Shape plugin implementation\n * Shape 생성과 관리를 담당하는 plugin\n */\nexport class ShapePlugin implements Plugin, IShapePlugin {\n  readonly id = 'shape';\n  readonly version = '1.0.0';\n  readonly dependencies = ['math'];\n\n  private factories: Map<string, ShapeFactory> = new Map();\n\n  constructor() {\n    // Register built-in shapes\n    this.registerShape('rectangle', new RectangleFactory());\n    this.registerShape('circle', new CircleFactory());\n  }\n\n  install(engine: VectorEngine): void {\n    // Plugin initialization\n  }\n\n  uninstall(engine: VectorEngine): void {\n    // Cleanup\n    this.factories.clear();\n  }\n\n  /**\n   * Register a new shape type\n   * @param type - Shape type identifier\n   * @param factory - Shape factory instance\n   */\n  registerShape<T extends Shape>(type: string, factory: ShapeFactory<T>): void {\n    if (this.factories.has(type)) {\n      throw new Error(`Shape type '${type}' is already registered`);\n    }\n    this.factories.set(type, factory);\n  }\n\n  /**\n   * Create a new shape instance\n   * @param type - Shape type identifier\n   * @param options - Shape creation options\n   * @returns New shape instance\n   */\n  createShape<T extends Shape>(type: string, options: ShapeOptions): T {\n    const factory = this.factories.get(type);\n    if (!factory) {\n      throw new Error(`Unknown shape type: ${type}`);\n    }\n    return factory.create(options) as T;\n  }\n\n  /**\n   * Check if a shape type is registered\n   * @param type - Shape type identifier\n   * @returns True if the shape type is registered\n   */\n  hasShape(type: string): boolean {\n    return this.factories.has(type);\n  }\n} ","import { RendererService, Renderer, Scene } from '../types';\n\n/**\n * Default implementation of RendererService\n */\nexport class DefaultRendererService implements RendererService {\n  private renderers: Map<string, Renderer> = new Map();\n  private activeRenderer: Renderer | null = null;\n\n  /**\n   * Register a new renderer\n   * @param renderer - The renderer to register\n   */\n  register(renderer: Renderer): void {\n    if (this.renderers.has(renderer.id)) {\n      throw new Error(`Renderer with id ${renderer.id} is already registered`);\n    }\n    this.renderers.set(renderer.id, renderer);\n    \n    // Set as active if it's the first renderer\n    if (!this.activeRenderer) {\n      this.activeRenderer = renderer;\n    }\n  }\n\n  /**\n   * Set the active renderer\n   * @param rendererId - ID of the renderer to set as active\n   */\n  setActive(rendererId: string): void {\n    const renderer = this.renderers.get(rendererId);\n    if (!renderer) {\n      throw new Error(`No renderer found with id ${rendererId}`);\n    }\n    this.activeRenderer = renderer;\n  }\n\n  /**\n   * Render a scene using the active renderer\n   * @param scene - The scene to render\n   */\n  render(scene: Scene): void {\n    if (!this.activeRenderer) {\n      throw new Error('No active renderer available');\n    }\n    this.activeRenderer.render(scene);\n  }\n} ","import { EventService, EventHandler, EventEmitter } from '../types';\n\n/**\n * Basic event emitter implementation\n */\nclass BaseEventEmitter implements EventEmitter {\n  private handlers: Map<string, Set<EventHandler>> = new Map();\n\n  on(event: string, handler: EventHandler): void {\n    if (!this.handlers.has(event)) {\n      this.handlers.set(event, new Set());\n    }\n    this.handlers.get(event)!.add(handler);\n  }\n\n  off(event: string, handler: EventHandler): void {\n    const handlers = this.handlers.get(event);\n    if (handlers) {\n      handlers.delete(handler);\n      if (handlers.size === 0) {\n        this.handlers.delete(event);\n      }\n    }\n  }\n\n  emit(event: string, data: any): void {\n    const handlers = this.handlers.get(event);\n    if (handlers) {\n      handlers.forEach(handler => handler(data));\n    }\n  }\n}\n\n/**\n * Default implementation of EventService with namespacing support\n */\nexport class DefaultEventService extends BaseEventEmitter implements EventService {\n  private namespaces: Map<string, EventEmitter> = new Map();\n\n  /**\n   * Create a new event namespace\n   * @param name - Namespace name\n   * @returns A new event emitter for the namespace\n   */\n  createNamespace(name: string): EventEmitter {\n    if (!this.namespaces.has(name)) {\n      this.namespaces.set(name, new BaseEventEmitter());\n    }\n    return this.namespaces.get(name)!;\n  }\n} ","import { SceneService, Scene, VectorEngine, EventEmitter, Plugin, Renderer } from '../types';\n\n/**\n * Default Scene implementation\n */\nclass DefaultScene implements Scene {\n  readonly root: Node;\n  readonly plugins: Map<string, Plugin>;\n  private eventEmitter: EventEmitter;\n\n  constructor(\n    private engine: VectorEngine,\n    eventEmitter: EventEmitter\n  ) {\n    this.root = document.createElement('div'); // Temporary Node implementation\n    this.plugins = new Map();\n    this.eventEmitter = eventEmitter;\n  }\n\n  get renderer(): Renderer {\n    return this.engine.renderer as unknown as Renderer;\n  }\n\n  on(event: string, handler: (data: any) => void): void {\n    this.eventEmitter.on(event, handler);\n  }\n\n  off(event: string, handler: (data: any) => void): void {\n    this.eventEmitter.off(event, handler);\n  }\n\n  emit(event: string, data: any): void {\n    this.eventEmitter.emit(event, data);\n  }\n}\n\n/**\n * Default implementation of SceneService\n */\nexport class DefaultSceneService implements SceneService {\n  private scenes: Set<Scene> = new Set();\n  private activeScene: Scene | null = null;\n\n  constructor(private engine: VectorEngine) {}\n\n  /**\n   * Create a new scene\n   * @returns The newly created scene\n   */\n  create(): Scene {\n    const scene = new DefaultScene(this.engine, this.engine.events.createNamespace('scene'));\n    this.scenes.add(scene);\n    \n    // Set as active if it's the first scene\n    if (!this.activeScene) {\n      this.activeScene = scene;\n    }\n    \n    return scene;\n  }\n\n  /**\n   * Get the active scene\n   * @returns The active scene\n   */\n  getActive(): Scene {\n    if (!this.activeScene) {\n      throw new Error('No active scene available');\n    }\n    return this.activeScene;\n  }\n\n  /**\n   * Set the active scene\n   * @param scene - The scene to set as active\n   */\n  setActive(scene: Scene): void {\n    if (!this.scenes.has(scene)) {\n      throw new Error('Scene is not managed by this service');\n    }\n    this.activeScene = scene;\n  }\n} ","import { VectorEngine, Plugin, RendererService, EventService, SceneService } from './types';\nimport { DefaultRendererService } from './services/renderer';\nimport { DefaultEventService } from './services/events';\nimport { DefaultSceneService } from './services/scene';\n\n/**\n * Vector Graphics Engine implementation\n */\nexport class VectorEngineImpl implements VectorEngine {\n  private plugins: Map<string, Plugin> = new Map();\n  \n  readonly renderer: RendererService;\n  readonly events: EventService;\n  readonly scene: SceneService;\n  \n  constructor() {\n    this.renderer = new DefaultRendererService();\n    this.events = new DefaultEventService();\n    this.scene = new DefaultSceneService(this);\n  }\n  \n  /**\n   * Install a plugin into the engine\n   * @param plugin - The plugin to install\n   * @throws Error if plugin dependencies are not met\n   */\n  use(plugin: Plugin): void {\n    // Check dependencies\n    if (plugin.dependencies) {\n      for (const dep of plugin.dependencies) {\n        if (!this.plugins.has(dep)) {\n          throw new Error(`Plugin ${plugin.id} requires ${dep} to be installed first`);\n        }\n      }\n    }\n    \n    // Install plugin\n    plugin.install(this);\n    this.plugins.set(plugin.id, plugin);\n  }\n  \n  /**\n   * Remove a plugin from the engine\n   * @param pluginId - ID of the plugin to remove\n   */\n  remove(pluginId: string): void {\n    const plugin = this.plugins.get(pluginId);\n    if (plugin) {\n      // Check if other plugins depend on this one\n      for (const [id, p] of this.plugins) {\n        if (p.dependencies?.includes(pluginId)) {\n          throw new Error(`Cannot remove plugin ${pluginId}: plugin ${id} depends on it`);\n        }\n      }\n      \n      plugin.uninstall(this);\n      this.plugins.delete(pluginId);\n    }\n  }\n  \n  /**\n   * Get a plugin by ID\n   * @param id - Plugin ID\n   * @returns The plugin instance or null if not found\n   */\n  getPlugin<T extends Plugin>(id: string): T | null {\n    return (this.plugins.get(id) as T) || null;\n  }\n} "],"names":["CanvasRenderer","options","context","width","height","ratio","scene","node","shape","matrix","bounds","centerX","centerY","radius","point","index","SVGRenderer","viewBox","element","rect","circle","line","path","d","text","textAlign","textBaseline","Vector2D","x","y","other","scalar","len","cos","angle","sin","Matrix3x3","_values","values","tx","ty","sx","sy","a","b","result","i","j","sum","k","a00","a01","a02","a10","a11","a12","a20","a21","a22","det","b00","b01","b02","b10","b11","b12","b20","b21","b22","invDet","AbstractShape","type","origin","localBounds","b1","b2","scaleX","scaleY","originX","originY","originTransform","inverseOriginTransform","Rectangle","corners","p","transformed","xs","ys","minX","minY","maxX","maxY","scale","local","RectangleFactory","Circle","center","transformedX","transformedY","transformedRadius","worldCenter","dx","dy","distance","segments","points","CircleFactory","ShapePlugin","engine","factory","DefaultRendererService","renderer","rendererId","BaseEventEmitter","event","handler","handlers","data","DefaultEventService","name","DefaultScene","eventEmitter","DefaultSceneService","VectorEngineImpl","plugin","dep","pluginId","id"],"mappings":"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"}