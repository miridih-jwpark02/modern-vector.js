{"version":3,"file":"modern-vector.js","sources":["../src/plugins/renderers/canvas/canvas-renderer.ts","../src/plugins/renderers/svg/svg-renderer.ts","../src/plugins/core/math/vector.ts","../src/plugins/core/math/matrix.ts","../src/plugins/core/shapes/abstract-shape.ts","../src/plugins/core/shapes/rectangle.ts","../src/plugins/core/shapes/circle.ts","../src/plugins/core/shapes/shape-plugin.ts","../src/core/services/renderer.ts","../src/core/services/events.ts","../src/core/services/scene.ts","../src/core/engine.ts"],"sourcesContent":["import { Renderer, RendererCapabilities, CanvasRendererOptions } from '../types';\nimport { Scene } from '../../../core/types';\nimport { Shape } from '../../core/shapes/types';\n\n/**\n * Canvas renderer implementation\n */\nexport class CanvasRenderer implements Renderer {\n  readonly id = 'canvas';\n  readonly capabilities: RendererCapabilities = {\n    maxTextureSize: 4096,\n    supportsSVG: false,\n    supportsWebGL: false,\n    supports3D: false\n  };\n\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private options: Required<CanvasRendererOptions>;\n  private displaySize: { width: number; height: number } = { width: 0, height: 0 };\n\n  constructor(options: CanvasRendererOptions = {}) {\n    this.options = {\n      context: {\n        canvas: options.context?.canvas || document.createElement('canvas'),\n        contextType: options.context?.contextType || '2d',\n        contextAttributes: options.context?.contextAttributes || {}\n      },\n      antialias: options.antialias ?? true,\n      alpha: options.alpha ?? true,\n      autoClear: options.autoClear ?? true,\n      backgroundColor: options.backgroundColor || 'transparent',\n      pixelRatio: options.pixelRatio || 1\n    };\n\n    this.canvas = this.options.context.canvas;\n    const context = this.canvas.getContext('2d', {\n      alpha: this.options.alpha,\n      ...this.options.context.contextAttributes\n    });\n\n    if (!context) {\n      throw new Error('Failed to get 2D context');\n    }\n\n    this.context = context;\n\n    // Enable antialiasing\n    if (this.options.antialias) {\n      this.context.imageSmoothingEnabled = true;\n      this.context.imageSmoothingQuality = 'high';\n    }\n\n    // Set initial size\n    this.setSize(this.canvas.width, this.canvas.height);\n  }\n\n  /**\n   * Canvas element 가져오기\n   */\n  getCanvas(): HTMLCanvasElement {\n    return this.canvas;\n  }\n\n  /**\n   * Canvas context 가져오기\n   */\n  getContext(): CanvasRenderingContext2D {\n    return this.context;\n  }\n\n  /**\n   * Canvas 크기 설정\n   * @param width - Canvas 너비\n   * @param height - Canvas 높이\n   */\n  setSize(width: number, height: number): void {\n    const ratio = this.options.pixelRatio;\n\n    // Set display size\n    this.displaySize = {\n      width,\n      height\n    };\n\n    // Set actual size in memory\n    this.canvas.width = width * ratio;\n    this.canvas.height = height * ratio;\n\n    // Reset context state\n    this.context.setTransform(1, 0, 0, 1, 0, 0);\n\n    // Scale context to match pixel ratio\n    this.context.scale(ratio, ratio);\n\n    // Reset context state\n    this.context.imageSmoothingEnabled = this.options.antialias;\n    this.context.imageSmoothingQuality = 'high';\n  }\n\n  /**\n   * Scene 렌더링\n   * @param scene - 렌더링할 Scene\n   */\n  render(scene: Scene): void {\n    // Clear canvas if needed\n    if (this.options.autoClear) {\n      this.clear();\n    }\n\n    // Save context state\n    this.context.save();\n\n    // Render each shape\n    scene.root.childNodes.forEach(node => {\n      const shape = node as unknown as Shape;\n      this.renderShape(shape);\n    });\n\n    // Restore context state\n    this.context.restore();\n  }\n\n  /**\n   * Shape 렌더링\n   * @param shape - 렌더링할 Shape\n   */\n  private renderShape(shape: Shape): void {\n    // Save context state\n    this.context.save();\n\n    // Apply transform\n    const matrix = shape.transform.values;\n    this.context.transform(\n      matrix[0], matrix[3], // a, b\n      matrix[1], matrix[4], // c, d\n      matrix[2], matrix[5]  // e, f\n    );\n\n    // Apply style\n    if (shape.style.fillColor) {\n      this.context.fillStyle = shape.style.fillColor;\n    }\n    if (shape.style.strokeColor) {\n      this.context.strokeStyle = shape.style.strokeColor;\n    }\n    if (shape.style.strokeWidth) {\n      this.context.lineWidth = shape.style.strokeWidth;\n    }\n    if (shape.style.strokeDashArray) {\n      this.context.setLineDash(shape.style.strokeDashArray);\n    }\n    if (shape.style.strokeDashOffset) {\n      this.context.lineDashOffset = shape.style.strokeDashOffset;\n    }\n    if (shape.style.strokeLineCap) {\n      this.context.lineCap = shape.style.strokeLineCap;\n    }\n    if (shape.style.strokeLineJoin) {\n      this.context.lineJoin = shape.style.strokeLineJoin;\n    }\n    if (shape.style.strokeMiterLimit) {\n      this.context.miterLimit = shape.style.strokeMiterLimit;\n    }\n    if (shape.style.fillOpacity !== undefined) {\n      this.context.globalAlpha = shape.style.fillOpacity;\n    }\n\n    // Draw shape based on type\n    switch (shape.type) {\n      case 'rectangle':\n        this.renderRectangle(shape);\n        break;\n      case 'circle':\n        this.renderCircle(shape);\n        break;\n      case 'line':\n        this.renderLine(shape);\n        break;\n      case 'path':\n        this.renderPath(shape);\n        break;\n      case 'text':\n        this.renderText(shape);\n        break;\n    }\n\n    // Restore context state\n    this.context.restore();\n  }\n\n  /**\n   * Rectangle 렌더링\n   * @param shape - 렌더링할 Rectangle\n   */\n  private renderRectangle(shape: Shape): void {\n    const bounds = shape.bounds;\n    if (shape.style.fillColor) {\n      this.context.fillRect(bounds.x, bounds.y, bounds.width, bounds.height);\n    }\n    if (shape.style.strokeColor) {\n      this.context.strokeRect(bounds.x, bounds.y, bounds.width, bounds.height);\n    }\n  }\n\n  /**\n   * Circle 렌더링\n   * @param shape - 렌더링할 Circle\n   */\n  private renderCircle(shape: Shape): void {\n    const bounds = shape.bounds;\n    const centerX = bounds.x + bounds.width / 2;\n    const centerY = bounds.y + bounds.height / 2;\n    const radius = bounds.width / 2;\n\n    this.context.beginPath();\n    this.context.arc(centerX, centerY, radius, 0, Math.PI * 2);\n    \n    if (shape.style.fillColor) {\n      this.context.fill();\n    }\n    if (shape.style.strokeColor) {\n      this.context.stroke();\n    }\n  }\n\n  /**\n   * Line 렌더링\n   * @param shape - 렌더링할 Line\n   */\n  private renderLine(shape: Shape): void {\n    const bounds = shape.bounds;\n    this.context.beginPath();\n    this.context.moveTo(bounds.x, bounds.y);\n    this.context.lineTo(bounds.x + bounds.width, bounds.y + bounds.height);\n    \n    if (shape.style.strokeColor) {\n      this.context.stroke();\n    }\n  }\n\n  /**\n   * Path 렌더링\n   * @param shape - 렌더링할 Path\n   */\n  private renderPath(shape: Shape): void {\n    if (!shape.points) return;\n\n    this.context.beginPath();\n    shape.points.forEach((point, index) => {\n      if (point.type === 'move' || index === 0) {\n        this.context.moveTo(point.x, point.y);\n      } else {\n        this.context.lineTo(point.x, point.y);\n      }\n    });\n\n    if (shape.style.fillColor) {\n      this.context.fill();\n    }\n    if (shape.style.strokeColor) {\n      this.context.stroke();\n    }\n  }\n\n  /**\n   * Text 렌더링\n   * @param shape - 렌더링할 Text\n   */\n  private renderText(shape: Shape): void {\n    if (!shape.text) return;\n\n    if (shape.font && shape.fontSize) {\n      this.context.font = `${shape.fontSize}px ${shape.font}`;\n    }\n    if (shape.textAlign) {\n      this.context.textAlign = shape.textAlign;\n    }\n    if (shape.textBaseline) {\n      this.context.textBaseline = shape.textBaseline;\n    }\n\n    const bounds = shape.bounds;\n    if (shape.style.fillColor) {\n      this.context.fillText(shape.text, bounds.x, bounds.y);\n    }\n    if (shape.style.strokeColor) {\n      this.context.strokeText(shape.text, bounds.x, bounds.y);\n    }\n  }\n\n  /**\n   * Canvas 클리어\n   */\n  clear(): void {\n    this.context.save();\n    this.context.setTransform(1, 0, 0, 1, 0, 0);\n    \n    if (this.options.backgroundColor === 'transparent') {\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    } else {\n      this.context.fillStyle = this.options.backgroundColor;\n      this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    this.context.restore();\n  }\n\n  /**\n   * 리소스 정리\n   */\n  dispose(): void {\n    // Clear canvas\n    this.clear();\n\n    // Remove canvas from DOM if it was created by us\n    if (!this.options.context.canvas.parentNode) {\n      if (typeof this.canvas.remove === 'function') {\n        this.canvas.remove();\n      }\n    }\n  }\n} ","import { Renderer, RendererCapabilities, SVGRendererOptions } from '../types';\nimport { Scene } from '../../../core/types';\nimport { Shape } from '../../core/shapes/types';\n\n/**\n * SVG renderer implementation\n */\nexport class SVGRenderer implements Renderer {\n  readonly id = 'svg';\n  readonly capabilities: RendererCapabilities = {\n    maxTextureSize: Infinity,\n    supportsSVG: true,\n    supportsWebGL: false,\n    supports3D: false\n  };\n\n  private svg: SVGSVGElement;\n  private options: Required<SVGRendererOptions>;\n  private displaySize: { width: number; height: number } = { width: 0, height: 0 };\n  private readonly svgNS: string;\n\n  constructor(options: SVGRendererOptions = {}) {\n    this.svgNS = options.context?.namespace || 'http://www.w3.org/2000/svg';\n    this.options = {\n      context: {\n        svg: options.context?.svg || document.createElementNS(this.svgNS, 'svg') as SVGSVGElement,\n        namespace: this.svgNS\n      },\n      antialias: options.antialias ?? true,\n      alpha: options.alpha ?? true,\n      autoClear: options.autoClear ?? true,\n      backgroundColor: options.backgroundColor || 'transparent',\n      pixelRatio: options.pixelRatio || 1,\n      width: options.width || 100,\n      height: options.height || 100,\n      viewBox: options.viewBox || {\n        x: 0,\n        y: 0,\n        width: options.width || 100,\n        height: options.height || 100\n      },\n      preserveAspectRatio: options.preserveAspectRatio || 'xMidYMid meet'\n    };\n\n    this.svg = this.options.context.svg!;\n\n    // Set initial size\n    this.setSize(this.options.width, this.options.height);\n  }\n\n  /**\n   * SVG element 가져오기\n   */\n  getSVG(): SVGSVGElement {\n    return this.svg;\n  }\n\n  /**\n   * SVG 크기 설정\n   * @param width - SVG 너비\n   * @param height - SVG 높이\n   */\n  setSize(width: number, height: number): void {\n    const ratio = this.options.pixelRatio;\n\n    // Set display size\n    this.displaySize = {\n      width,\n      height\n    };\n\n    // Set actual size\n    this.svg.setAttribute('width', `${width * ratio}`);\n    this.svg.setAttribute('height', `${height * ratio}`);\n\n    // Set viewBox\n    const viewBox = this.options.viewBox;\n    this.svg.setAttribute('viewBox', `${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`);\n\n    // Set preserveAspectRatio\n    this.svg.setAttribute('preserveAspectRatio', this.options.preserveAspectRatio);\n  }\n\n  /**\n   * Scene 렌더링\n   * @param scene - 렌더링할 Scene\n   */\n  render(scene: Scene): void {\n    // Clear SVG if needed\n    if (this.options.autoClear) {\n      this.clear();\n    }\n\n    // Render each shape\n    scene.root.childNodes.forEach(node => {\n      const shape = node as unknown as Shape;\n      this.renderShape(shape);\n    });\n  }\n\n  /**\n   * Shape 렌더링\n   * @param shape - 렌더링할 Shape\n   */\n  private renderShape(shape: Shape): void {\n    let element: SVGElement;\n\n    // Create shape element based on type\n    switch (shape.type) {\n      case 'rectangle':\n        element = this.renderRectangle(shape);\n        break;\n      case 'circle':\n        element = this.renderCircle(shape);\n        break;\n      case 'line':\n        element = this.renderLine(shape);\n        break;\n      case 'path':\n        element = this.renderPath(shape);\n        break;\n      case 'text':\n        element = this.renderText(shape);\n        break;\n      default:\n        return;\n    }\n\n    // Apply transform\n    const matrix = shape.transform.values;\n    element.setAttribute('transform', `matrix(${matrix[0]},${matrix[1]},${matrix[3]},${matrix[4]},${matrix[2]},${matrix[5]})`);\n\n    // Apply style\n    if (shape.style.fillColor) {\n      element.setAttribute('fill', shape.style.fillColor);\n    }\n    if (shape.style.strokeColor) {\n      element.setAttribute('stroke', shape.style.strokeColor);\n    }\n    if (shape.style.strokeWidth) {\n      element.setAttribute('stroke-width', shape.style.strokeWidth.toString());\n    }\n    if (shape.style.strokeDashArray) {\n      element.setAttribute('stroke-dasharray', shape.style.strokeDashArray.join(','));\n    }\n    if (shape.style.strokeDashOffset) {\n      element.setAttribute('stroke-dashoffset', shape.style.strokeDashOffset.toString());\n    }\n    if (shape.style.strokeLineCap) {\n      element.setAttribute('stroke-linecap', shape.style.strokeLineCap);\n    }\n    if (shape.style.strokeLineJoin) {\n      element.setAttribute('stroke-linejoin', shape.style.strokeLineJoin);\n    }\n    if (shape.style.strokeMiterLimit) {\n      element.setAttribute('stroke-miterlimit', shape.style.strokeMiterLimit.toString());\n    }\n    if (shape.style.fillOpacity !== undefined) {\n      element.setAttribute('fill-opacity', shape.style.fillOpacity.toString());\n    }\n\n    // Add to SVG\n    this.svg.appendChild(element);\n  }\n\n  /**\n   * Rectangle 렌더링\n   * @param shape - 렌더링할 Rectangle\n   */\n  private renderRectangle(shape: Shape): SVGRectElement {\n    const rect = document.createElementNS(this.svgNS, 'rect') as SVGRectElement;\n    const bounds = shape.bounds;\n    rect.setAttribute('x', bounds.x.toString());\n    rect.setAttribute('y', bounds.y.toString());\n    rect.setAttribute('width', bounds.width.toString());\n    rect.setAttribute('height', bounds.height.toString());\n    return rect;\n  }\n\n  /**\n   * Circle 렌더링\n   * @param shape - 렌더링할 Circle\n   */\n  private renderCircle(shape: Shape): SVGCircleElement {\n    const circle = document.createElementNS(this.svgNS, 'circle') as SVGCircleElement;\n    const bounds = shape.bounds;\n    const centerX = bounds.x + bounds.width / 2;\n    const centerY = bounds.y + bounds.height / 2;\n    const radius = bounds.width / 2;\n    circle.setAttribute('cx', centerX.toString());\n    circle.setAttribute('cy', centerY.toString());\n    circle.setAttribute('r', radius.toString());\n    return circle;\n  }\n\n  /**\n   * Line 렌더링\n   * @param shape - 렌더링할 Line\n   */\n  private renderLine(shape: Shape): SVGLineElement {\n    const line = document.createElementNS(this.svgNS, 'line') as SVGLineElement;\n    const bounds = shape.bounds;\n    line.setAttribute('x1', bounds.x.toString());\n    line.setAttribute('y1', bounds.y.toString());\n    line.setAttribute('x2', (bounds.x + bounds.width).toString());\n    line.setAttribute('y2', (bounds.y + bounds.height).toString());\n    return line;\n  }\n\n  /**\n   * Path 렌더링\n   * @param shape - 렌더링할 Path\n   */\n  private renderPath(shape: Shape): SVGPathElement {\n    const path = document.createElementNS(this.svgNS, 'path') as SVGPathElement;\n    if (!shape.points) return path;\n\n    let d = '';\n    shape.points.forEach((point, index) => {\n      if (point.type === 'move' || index === 0) {\n        d += `M ${point.x} ${point.y}`;\n      } else {\n        d += `L ${point.x} ${point.y}`;\n      }\n    });\n    path.setAttribute('d', d);\n    return path;\n  }\n\n  /**\n   * Text 렌더링\n   * @param shape - 렌더링할 Text\n   */\n  private renderText(shape: Shape): SVGTextElement {\n    const text = document.createElementNS(this.svgNS, 'text') as SVGTextElement;\n    if (!shape.text) return text;\n\n    const bounds = shape.bounds;\n    text.setAttribute('x', bounds.x.toString());\n    text.setAttribute('y', bounds.y.toString());\n\n    if (shape.font) {\n      text.setAttribute('font-family', shape.font);\n    }\n    if (shape.fontSize) {\n      text.setAttribute('font-size', shape.fontSize.toString());\n    }\n    if (shape.textAlign) {\n      text.setAttribute('text-anchor', this.getTextAnchor(shape.textAlign));\n    }\n    if (shape.textBaseline) {\n      text.setAttribute('dominant-baseline', this.getDominantBaseline(shape.textBaseline));\n    }\n\n    text.textContent = shape.text;\n    return text;\n  }\n\n  /**\n   * SVG text-anchor 값 가져오기\n   * @param textAlign - Text 정렬\n   */\n  private getTextAnchor(textAlign: string): string {\n    switch (textAlign) {\n      case 'center':\n        return 'middle';\n      case 'right':\n        return 'end';\n      default:\n        return 'start';\n    }\n  }\n\n  /**\n   * SVG dominant-baseline 값 가져오기\n   * @param textBaseline - Text 기준선\n   */\n  private getDominantBaseline(textBaseline: string): string {\n    switch (textBaseline) {\n      case 'middle':\n        return 'central';\n      case 'bottom':\n        return 'text-after-edge';\n      default:\n        return 'text-before-edge';\n    }\n  }\n\n  /**\n   * SVG 클리어\n   */\n  clear(): void {\n    // Remove all child nodes\n    while (this.svg.firstChild) {\n      this.svg.removeChild(this.svg.firstChild);\n    }\n\n    // Set background color if needed\n    if (this.options.backgroundColor !== 'transparent') {\n      const rect = document.createElementNS(this.svgNS, 'rect');\n      rect.setAttribute('x', '0');\n      rect.setAttribute('y', '0');\n      rect.setAttribute('width', '100%');\n      rect.setAttribute('height', '100%');\n      rect.setAttribute('fill', this.options.backgroundColor);\n      this.svg.appendChild(rect);\n    }\n  }\n\n  /**\n   * 리소스 정리\n   */\n  dispose(): void {\n    // Clear SVG\n    this.clear();\n\n    // Remove SVG from DOM if it was created by us\n    if (this.options.context.svg && !this.options.context.svg.parentNode) {\n      this.svg.remove();\n    }\n  }\n} ","/**\n * 2D Vector implementation\n * 벡터의 불변성을 보장하기 위해 모든 연산은 새로운 벡터를 반환\n */\nexport class Vector2D {\n  private constructor(\n    readonly x: number,\n    readonly y: number\n  ) {\n    // Convert -0 to +0\n    this.x = this.x === 0 ? 0 : this.x;\n    this.y = this.y === 0 ? 0 : this.y;\n  }\n\n  /**\n   * Create a new 2D vector\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @returns A new Vector2D instance\n   */\n  static create(x: number = 0, y: number = 0): Vector2D {\n    return new Vector2D(x, y);\n  }\n\n  /**\n   * Add another vector to this one\n   * @param other - Vector to add\n   * @returns A new vector representing the sum\n   */\n  add(other: Vector2D): Vector2D {\n    return new Vector2D(this.x + other.x, this.y + other.y);\n  }\n\n  /**\n   * Subtract another vector from this one\n   * @param other - Vector to subtract\n   * @returns A new vector representing the difference\n   */\n  subtract(other: Vector2D): Vector2D {\n    return new Vector2D(this.x - other.x, this.y - other.y);\n  }\n\n  /**\n   * Scale the vector by a scalar value\n   * @param scalar - Scale factor\n   * @returns A new scaled vector\n   */\n  scale(scalar: number): Vector2D {\n    return new Vector2D(this.x * scalar, this.y * scalar);\n  }\n\n  /**\n   * Calculate the dot product with another vector\n   * @param other - Vector to calculate dot product with\n   * @returns The dot product value\n   */\n  dot(other: Vector2D): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  /**\n   * Get the length (magnitude) of the vector\n   */\n  get length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  /**\n   * Get a normalized (unit length) version of the vector\n   * @returns A new normalized vector\n   */\n  normalize(): Vector2D {\n    const len = this.length;\n    if (len === 0) return Vector2D.create(0, 0);\n    return this.scale(1 / len);\n  }\n\n  /**\n   * Calculate the angle between this vector and another\n   * @param other - Vector to calculate angle with\n   * @returns Angle in radians\n   */\n  angle(other: Vector2D): number {\n    const dot = this.dot(other);\n    const cos = dot / (this.length * other.length);\n    return Math.acos(Math.min(Math.max(cos, -1), 1));\n  }\n\n  /**\n   * Rotate the vector by an angle\n   * @param angle - Angle in radians\n   * @returns A new rotated vector\n   */\n  rotate(angle: number): Vector2D {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    return new Vector2D(\n      this.x * cos - this.y * sin,\n      this.x * sin + this.y * cos\n    );\n  }\n\n  /**\n   * Get a perpendicular vector\n   * @returns A new vector perpendicular to this one\n   */\n  perpendicular(): Vector2D {\n    // Convert -0 to +0 when creating new vector\n    const x = -this.y === 0 ? 0 : -this.y;\n    const y = this.x === 0 ? 0 : this.x;\n    return new Vector2D(x, y);\n  }\n\n  /**\n   * Calculate the distance to another vector\n   * @param other - Vector to calculate distance to\n   * @returns The distance between the vectors\n   */\n  distanceTo(other: Vector2D): number {\n    return this.subtract(other).length;\n  }\n} ","/**\n * 3x3 Matrix implementation\n * 행렬의 불변성을 보장하기 위해 모든 연산은 새로운 행렬을 반환\n */\nexport class Matrix3x3 {\n  private constructor(\n    private _values: number[]\n  ) {\n    if (_values.length !== 9) {\n      throw new Error('Matrix3x3 requires exactly 9 values');\n    }\n  }\n\n  /**\n   * Get matrix values\n   */\n  get values(): number[] {\n    return [...this._values];\n  }\n\n  /**\n   * Create a new 3x3 matrix\n   * @param values - Optional array of 9 values (row-major order)\n   * @returns A new Matrix3x3 instance\n   */\n  static create(values?: number[]): Matrix3x3 {\n    if (!values) {\n      return new Matrix3x3([\n        1, 0, 0,\n        0, 1, 0,\n        0, 0, 1\n      ]);\n    }\n    return new Matrix3x3([...values]);\n  }\n\n  /**\n   * Create a translation matrix\n   * @param tx - X translation\n   * @param ty - Y translation\n   * @returns A new translation matrix\n   */\n  static translation(tx: number, ty: number): Matrix3x3 {\n    return new Matrix3x3([\n      1, 0, tx,\n      0, 1, ty,\n      0, 0, 1\n    ]);\n  }\n\n  /**\n   * Create a rotation matrix\n   * @param angle - Rotation angle in radians\n   * @returns A new rotation matrix\n   */\n  static rotation(angle: number): Matrix3x3 {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    return new Matrix3x3([\n      cos, -sin, 0,\n      sin, cos, 0,\n      0, 0, 1\n    ]);\n  }\n\n  /**\n   * Create a scale matrix\n   * @param sx - X scale factor\n   * @param sy - Y scale factor\n   * @returns A new scale matrix\n   */\n  static scale(sx: number, sy: number): Matrix3x3 {\n    return new Matrix3x3([\n      sx, 0, 0,\n      0, sy, 0,\n      0, 0, 1\n    ]);\n  }\n\n  /**\n   * Multiply this matrix with another\n   * @param other - Matrix to multiply with\n   * @returns A new matrix representing the product\n   */\n  multiply(other: Matrix3x3): Matrix3x3 {\n    const a = this._values;\n    const b = other._values;\n    const result = new Array(9);\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        let sum = 0;\n        for (let k = 0; k < 3; k++) {\n          sum += a[i * 3 + k] * b[k * 3 + j];\n        }\n        result[i * 3 + j] = sum;\n      }\n    }\n\n    return new Matrix3x3(result);\n  }\n\n  /**\n   * Calculate the determinant of this matrix\n   * @returns The determinant value\n   */\n  determinant(): number {\n    const [a00, a01, a02, a10, a11, a12, a20, a21, a22] = this._values;\n    \n    return (\n      a00 * (a11 * a22 - a12 * a21) -\n      a01 * (a10 * a22 - a12 * a20) +\n      a02 * (a10 * a21 - a11 * a20)\n    );\n  }\n\n  /**\n   * Calculate the inverse of this matrix\n   * @returns A new matrix representing the inverse\n   * @throws Error if matrix is not invertible\n   */\n  inverse(): Matrix3x3 {\n    const det = this.determinant();\n    if (Math.abs(det) < 1e-6) {\n      throw new Error('Matrix is not invertible');\n    }\n\n    const [a00, a01, a02, a10, a11, a12, a20, a21, a22] = this._values;\n    \n    // Calculate cofactor matrix\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a02 * a21 - a01 * a22;\n    const b02 = a01 * a12 - a02 * a11;\n    const b10 = a12 * a20 - a10 * a22;\n    const b11 = a00 * a22 - a02 * a20;\n    const b12 = a02 * a10 - a00 * a12;\n    const b20 = a10 * a21 - a11 * a20;\n    const b21 = a01 * a20 - a00 * a21;\n    const b22 = a00 * a11 - a01 * a10;\n\n    // Divide by determinant\n    const invDet = 1 / det;\n    return new Matrix3x3([\n      b00 * invDet, b01 * invDet, b02 * invDet,\n      b10 * invDet, b11 * invDet, b12 * invDet,\n      b20 * invDet, b21 * invDet, b22 * invDet\n    ]);\n  }\n} ","import { Matrix3x3 } from '../math/matrix';\nimport { Vector2D } from '../math/vector';\nimport { Shape, ShapeStyle, Bounds, ShapeOptions } from './types';\nimport { PathPoint } from './path/types';\n\n/**\n * Scale 기준점 타입\n */\nexport type ScaleOrigin = 'center' | 'topLeft' | 'custom';\n\n/**\n * Shape의 공통 기능을 구현한 추상 클래스\n */\nexport abstract class AbstractShape implements Shape {\n  readonly id: string;\n  readonly type: string;\n  readonly transform: Matrix3x3;\n  readonly style: ShapeStyle;\n  protected scaleOrigin: ScaleOrigin;\n  protected customScaleOrigin?: { x: number; y: number };\n\n  constructor(type: string, options: ShapeOptions = {}) {\n    this.id = options.id || crypto.randomUUID();\n    this.type = type;\n    this.transform = options.transform || Matrix3x3.create();\n    this.style = options.style || {};\n    this.scaleOrigin = options.scaleOrigin || 'topLeft';\n    this.customScaleOrigin = options.customScaleOriginPoint;\n  }\n\n  /**\n   * Scale 기준점 설정\n   * @param origin - Scale 기준점 ('center', 'topLeft', 'custom')\n   * @param point - Custom 기준점일 경우 좌표\n   */\n  setScaleOrigin(origin: ScaleOrigin, point?: { x: number; y: number }): void {\n    this.scaleOrigin = origin;\n    if (origin === 'custom' && point) {\n      this.customScaleOrigin = point;\n    }\n  }\n\n  /**\n   * Scale 기준점 가져오기\n   * @returns Scale 기준점 좌표\n   */\n  protected abstract getLocalBounds(): Bounds;\n\n  /**\n   * Scale 기준점 가져오기\n   * @returns Scale 기준점 좌표\n   */\n  protected getScaleOriginPoint(): { x: number; y: number } {\n    const localBounds = this.getLocalBounds();\n    \n    switch (this.scaleOrigin) {\n      case 'center':\n        return {\n          x: localBounds.x + localBounds.width / 2,\n          y: localBounds.y + localBounds.height / 2\n        };\n      case 'topLeft':\n        return {\n          x: localBounds.x,\n          y: localBounds.y\n        };\n      case 'custom':\n        return this.customScaleOrigin || this.getScaleOriginPoint();\n      default:\n        return this.getScaleOriginPoint();\n    }\n  }\n\n  /**\n   * Shape의 경계 상자 계산\n   */\n  abstract get bounds(): Bounds;\n\n  /**\n   * Shape 복제\n   */\n  abstract clone(): Shape;\n\n  /**\n   * Shape에 변환 적용\n   * @param matrix - 적용할 변환 행렬\n   */\n  abstract applyTransform(matrix: Matrix3x3): Shape;\n\n  /**\n   * Point가 Shape 내부에 있는지 확인\n   * @param point - 확인할 점\n   */\n  abstract containsPoint(point: Vector2D): boolean;\n\n  /**\n   * Shape를 Path로 변환\n   */\n  abstract toPath(): PathPoint[];\n\n  /**\n   * 기본 충돌 검사 구현 (Bounds 기반)\n   * @param other - 충돌 검사할 다른 Shape\n   */\n  intersects(other: Shape): boolean {\n    const b1 = this.bounds;\n    const b2 = other.bounds;\n\n    return !(\n      b2.x > b1.x + b1.width ||\n      b2.x + b2.width < b1.x ||\n      b2.y > b1.y + b1.height ||\n      b2.y + b2.height < b1.y\n    );\n  }\n\n  /**\n   * Scale 행렬 추출\n   * @param matrix - Scale을 추출할 행렬 (기본값: this.transform)\n   */\n  protected getTransformScale(matrix: Matrix3x3 = this.transform): { scaleX: number; scaleY: number } {\n    const scaleX = Math.sqrt(\n      matrix.values[0] * matrix.values[0] +\n      matrix.values[1] * matrix.values[1]\n    );\n    const scaleY = Math.sqrt(\n      matrix.values[3] * matrix.values[3] +\n      matrix.values[4] * matrix.values[4]\n    );\n    return { scaleX, scaleY };\n  }\n\n  /**\n   * 지정된 기준점으로 변환 행렬 계산\n   * @param matrix - 적용할 변환 행렬\n   * @param originX - 기준점 X 좌표\n   * @param originY - 기준점 Y 좌표\n   */\n  protected getTransformAroundPoint(\n    matrix: Matrix3x3,\n    originX: number,\n    originY: number\n  ): Matrix3x3 {\n    const originTransform = Matrix3x3.translation(originX, originY);\n    const inverseOriginTransform = Matrix3x3.translation(-originX, -originY);\n    \n    // 변환 순서: 기존 변환 -> 원점으로 이동 -> 스케일 적용 -> 원점 복귀\n    return originTransform\n      .multiply(matrix)\n      .multiply(inverseOriginTransform)\n      .multiply(this.transform);\n  }\n} ","import { Vector2D } from '../math/vector';\nimport { Matrix3x3 } from '../math/matrix';\nimport { Shape, ShapeStyle, Bounds, ShapeFactory, ShapeOptions } from './types';\nimport { AbstractShape } from './abstract-shape';\nimport { PathPoint } from './path/types';\n\n/**\n * Rectangle shape options\n */\nexport interface RectangleOptions extends ShapeOptions {\n  /** Rectangle의 x 좌표 */\n  x?: number;\n  /** Rectangle의 y 좌표 */\n  y?: number;\n  /** Rectangle의 너비 */\n  width?: number;\n  /** Rectangle의 높이 */\n  height?: number;\n}\n\n/**\n * Rectangle shape implementation\n */\nexport class Rectangle extends AbstractShape {\n  private _x: number;\n  private _y: number;\n  private _width: number;\n  private _height: number;\n\n  constructor(options: RectangleOptions = {}) {\n    super('rectangle', options);\n    \n    this._x = options.x || 0;\n    this._y = options.y || 0;\n    this._width = options.width || 0;\n    this._height = options.height || 0;\n  }\n\n  protected getLocalBounds(): Bounds {\n    return {\n      x: this._x,\n      y: this._y,\n      width: this._width,\n      height: this._height\n    };\n  }\n\n  get bounds(): Bounds {\n    // Transform 적용된 corner points 계산\n    const corners = [\n      Vector2D.create(this._x, this._y),\n      Vector2D.create(this._x + this._width, this._y),\n      Vector2D.create(this._x + this._width, this._y + this._height),\n      Vector2D.create(this._x, this._y + this._height)\n    ].map(p => {\n      const transformed = this.transform.multiply(Matrix3x3.translation(p.x, p.y));\n      return Vector2D.create(transformed.values[2], transformed.values[5]);\n    });\n\n    // Find min/max points\n    const xs = corners.map(p => p.x);\n    const ys = corners.map(p => p.y);\n    const minX = Math.min(...xs);\n    const minY = Math.min(...ys);\n    const maxX = Math.max(...xs);\n    const maxY = Math.max(...ys);\n\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  }\n\n  clone(): Shape {\n    return new Rectangle({\n      id: crypto.randomUUID(),\n      transform: Matrix3x3.create(this.transform.values),\n      style: { ...this.style },\n      x: this._x,\n      y: this._y,\n      width: this._width,\n      height: this._height\n    });\n  }\n\n  applyTransform(matrix: Matrix3x3): Shape {\n    // Scale 변환인 경우 지정된 기준점을 사용\n    const scale = this.getTransformScale(matrix);\n    if (scale.scaleX !== 1 || scale.scaleY !== 1) {\n      let origin;\n      switch (this.scaleOrigin) {\n        case 'center':\n          origin = {\n            x: this._x + this._width / 2,\n            y: this._y + this._height / 2\n          };\n          break;\n        case 'custom':\n          origin = this.customScaleOrigin || {\n            x: this._x,\n            y: this._y\n          };\n          break;\n        default:\n          origin = {\n            x: this._x,\n            y: this._y\n          };\n      }\n      return new Rectangle({\n        id: this.id,\n        transform: this.getTransformAroundPoint(matrix, origin.x, origin.y),\n        style: { ...this.style },\n        x: this._x,\n        y: this._y,\n        width: this._width,\n        height: this._height,\n        scaleOrigin: this.scaleOrigin,\n        customScaleOriginPoint: this.customScaleOrigin\n      });\n    }\n\n    // Scale이 아닌 변환은 기존 transform에 직접 적용\n    return new Rectangle({\n      id: this.id,\n      transform: matrix.multiply(this.transform),\n      style: { ...this.style },\n      x: this._x,\n      y: this._y,\n      width: this._width,\n      height: this._height,\n      scaleOrigin: this.scaleOrigin,\n      customScaleOriginPoint: this.customScaleOrigin\n    });\n  }\n\n  containsPoint(point: Vector2D): boolean {\n    // Transform point to local coordinates\n    const inverse = this.transform.inverse();\n    const local = inverse.multiply(Matrix3x3.translation(point.x, point.y));\n    const x = local.values[2];\n    const y = local.values[5];\n\n    return (\n      x >= this._x &&\n      x <= this._x + this._width &&\n      y >= this._y &&\n      y <= this._y + this._height\n    );\n  }\n\n  intersects(other: Shape): boolean {\n    // Simple bounds intersection check\n    const b1 = this.bounds;\n    const b2 = other.bounds;\n\n    return !(\n      b2.x > b1.x + b1.width ||\n      b2.x + b2.width < b1.x ||\n      b2.y > b1.y + b1.height ||\n      b2.y + b2.height < b1.y\n    );\n  }\n\n  /**\n   * Rectangle을 Path로 변환\n   * @returns Path points\n   */\n  toPath(): PathPoint[] {\n    const bounds = this.bounds;\n    return [\n      { x: bounds.x, y: bounds.y, type: 'move' },\n      { x: bounds.x + bounds.width, y: bounds.y, type: 'line' },\n      { x: bounds.x + bounds.width, y: bounds.y + bounds.height, type: 'line' },\n      { x: bounds.x, y: bounds.y + bounds.height, type: 'line' },\n      { x: bounds.x, y: bounds.y, type: 'line' }\n    ];\n  }\n}\n\n/**\n * Rectangle factory\n */\nexport class RectangleFactory implements ShapeFactory<Rectangle> {\n  create(options: RectangleOptions): Rectangle {\n    return new Rectangle(options);\n  }\n} ","import { Vector2D } from '../math/vector';\nimport { Matrix3x3 } from '../math/matrix';\nimport { Shape, ShapeStyle, Bounds, ShapeFactory, ShapeOptions } from './types';\nimport { AbstractShape } from './abstract-shape';\nimport { PathPoint } from './path/types';\n\n/**\n * Circle shape options\n */\nexport interface CircleOptions extends ShapeOptions {\n  /** Circle의 중심 x 좌표 */\n  centerX?: number;\n  /** Circle의 중심 y 좌표 */\n  centerY?: number;\n  /** Circle의 반지름 */\n  radius?: number;\n}\n\n/**\n * Circle shape implementation\n */\nexport class Circle extends AbstractShape {\n  private _centerX: number;\n  private _centerY: number;\n  private _radius: number;\n\n  constructor(options: CircleOptions = {}) {\n    super('circle', options);\n    \n    this._centerX = options.centerX || 0;\n    this._centerY = options.centerY || 0;\n    this._radius = options.radius || 0;\n  }\n\n  protected getLocalBounds(): Bounds {\n    return {\n      x: this._centerX - this._radius,\n      y: this._centerY - this._radius,\n      width: this._radius * 2,\n      height: this._radius * 2\n    };\n  }\n\n  get bounds(): Bounds {\n    // Transform 적용된 center point 계산\n    const center = this.transform.multiply(Matrix3x3.translation(this._centerX, this._centerY));\n    const transformedX = center.values[2];\n    const transformedY = center.values[5];\n\n    // Scale 행렬 추출하여 radius 계산\n    const { scaleX, scaleY } = this.getTransformScale();\n    const transformedRadius = Math.max(scaleX, scaleY) * this._radius;\n\n    return {\n      x: transformedX - transformedRadius,\n      y: transformedY - transformedRadius,\n      width: transformedRadius * 2,\n      height: transformedRadius * 2\n    };\n  }\n\n  clone(): Shape {\n    return new Circle({\n      id: crypto.randomUUID(),\n      transform: Matrix3x3.create(this.transform.values),\n      style: { ...this.style },\n      centerX: this._centerX,\n      centerY: this._centerY,\n      radius: this._radius\n    });\n  }\n\n  applyTransform(matrix: Matrix3x3): Shape {\n    // Scale 변환인 경우 지정된 기준점을 사용\n    const scale = this.getTransformScale(matrix);\n    if (scale.scaleX !== 1 || scale.scaleY !== 1) {\n      let origin;\n      switch (this.scaleOrigin) {\n        case 'center':\n          origin = {\n            x: this._centerX,\n            y: this._centerY\n          };\n          break;\n        case 'custom':\n          origin = this.customScaleOrigin || {\n            x: this._centerX - this._radius,\n            y: this._centerY - this._radius\n          };\n          break;\n        default:\n          origin = {\n            x: this._centerX - this._radius,\n            y: this._centerY - this._radius\n          };\n      }\n      return new Circle({\n        id: this.id,\n        transform: this.getTransformAroundPoint(matrix, origin.x, origin.y),\n        style: { ...this.style },\n        centerX: this._centerX,\n        centerY: this._centerY,\n        radius: this._radius,\n        scaleOrigin: this.scaleOrigin,\n        customScaleOriginPoint: this.customScaleOrigin\n      });\n    }\n\n    // Scale이 아닌 변환은 기존 transform에 직접 적용\n    return new Circle({\n      id: this.id,\n      transform: matrix.multiply(this.transform),\n      style: { ...this.style },\n      centerX: this._centerX,\n      centerY: this._centerY,\n      radius: this._radius,\n      scaleOrigin: this.scaleOrigin,\n      customScaleOriginPoint: this.customScaleOrigin\n    });\n  }\n\n  containsPoint(point: Vector2D): boolean {\n    // Transform center point to world coordinates\n    const worldCenter = this.transform.multiply(Matrix3x3.translation(this._centerX, this._centerY));\n    const centerX = worldCenter.values[2];\n    const centerY = worldCenter.values[5];\n\n    // Calculate distance in world coordinates\n    const dx = point.x - centerX;\n    const dy = point.y - centerY;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n\n    // Scale 행렬 추출하여 radius 계산\n    const { scaleX, scaleY } = this.getTransformScale();\n    const transformedRadius = Math.max(scaleX, scaleY) * this._radius;\n\n    return distance <= transformedRadius;\n  }\n\n  intersects(other: Shape): boolean {\n    // Simple bounds intersection check for now\n    // 더 정확한 circle-specific 교차 검사는 나중에 구현\n    const b1 = this.bounds;\n    const b2 = other.bounds;\n\n    return !(\n      b2.x > b1.x + b1.width ||\n      b2.x + b2.width < b1.x ||\n      b2.y > b1.y + b1.height ||\n      b2.y + b2.height < b1.y\n    );\n  }\n\n  /**\n   * Circle을 Path로 변환\n   * @param segments - 원을 근사할 선분의 수 (기본값: 32)\n   * @returns Path points\n   */\n  toPath(segments: number = 32): PathPoint[] {\n    const bounds = this.bounds;\n    const centerX = bounds.x + bounds.width / 2;\n    const centerY = bounds.y + bounds.height / 2;\n    const radius = bounds.width / 2;\n    const points: PathPoint[] = [];\n\n    // 첫 점은 move\n    points.push({\n      x: centerX + radius,\n      y: centerY,\n      type: 'move'\n    });\n\n    // 나머지 점들은 line\n    for (let i = 1; i <= segments; i++) {\n      const angle = (i * 2 * Math.PI) / segments;\n      points.push({\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle),\n        type: 'line'\n      });\n    }\n\n    // 마지막 점은 시작점과 같게\n    points.push({\n      x: centerX + radius,\n      y: centerY,\n      type: 'line'\n    });\n\n    return points;\n  }\n}\n\n/**\n * Circle factory\n */\nexport class CircleFactory implements ShapeFactory<Circle> {\n  create(options: CircleOptions): Circle {\n    return new Circle(options);\n  }\n} ","import { Plugin, VectorEngine } from '../../../core/types';\nimport { Shape, ShapeFactory, ShapeOptions, ShapePlugin as IShapePlugin } from './types';\nimport { Rectangle, RectangleFactory } from './rectangle';\nimport { Circle, CircleFactory } from './circle';\n\n/**\n * Shape plugin implementation\n * Shape 생성과 관리를 담당하는 plugin\n */\nexport class ShapePlugin implements Plugin, IShapePlugin {\n  readonly id = 'shape';\n  readonly version = '1.0.0';\n  readonly dependencies = ['math'];\n\n  private factories: Map<string, ShapeFactory> = new Map();\n\n  constructor() {\n    // Register built-in shapes\n    this.registerShape('rectangle', new RectangleFactory());\n    this.registerShape('circle', new CircleFactory());\n  }\n\n  install(engine: VectorEngine): void {\n    // Plugin initialization\n  }\n\n  uninstall(engine: VectorEngine): void {\n    // Cleanup\n    this.factories.clear();\n  }\n\n  /**\n   * Register a new shape type\n   * @param type - Shape type identifier\n   * @param factory - Shape factory instance\n   */\n  registerShape<T extends Shape>(type: string, factory: ShapeFactory<T>): void {\n    if (this.factories.has(type)) {\n      throw new Error(`Shape type '${type}' is already registered`);\n    }\n    this.factories.set(type, factory);\n  }\n\n  /**\n   * Create a new shape instance\n   * @param type - Shape type identifier\n   * @param options - Shape creation options\n   * @returns New shape instance\n   */\n  createShape<T extends Shape>(type: string, options: ShapeOptions): T {\n    const factory = this.factories.get(type);\n    if (!factory) {\n      throw new Error(`Unknown shape type: ${type}`);\n    }\n    return factory.create(options) as T;\n  }\n\n  /**\n   * Check if a shape type is registered\n   * @param type - Shape type identifier\n   * @returns True if the shape type is registered\n   */\n  hasShape(type: string): boolean {\n    return this.factories.has(type);\n  }\n} ","import { RendererService, Renderer, Scene } from '../types';\n\n/**\n * Default implementation of RendererService\n */\nexport class DefaultRendererService implements RendererService {\n  private renderers: Map<string, Renderer> = new Map();\n  private activeRenderer: Renderer | null = null;\n\n  /**\n   * Register a new renderer\n   * @param renderer - The renderer to register\n   */\n  register(renderer: Renderer): void {\n    if (this.renderers.has(renderer.id)) {\n      throw new Error(`Renderer with id ${renderer.id} is already registered`);\n    }\n    this.renderers.set(renderer.id, renderer);\n    \n    // Set as active if it's the first renderer\n    if (!this.activeRenderer) {\n      this.activeRenderer = renderer;\n    }\n  }\n\n  /**\n   * Set the active renderer\n   * @param rendererId - ID of the renderer to set as active\n   */\n  setActive(rendererId: string): void {\n    const renderer = this.renderers.get(rendererId);\n    if (!renderer) {\n      throw new Error(`No renderer found with id ${rendererId}`);\n    }\n    this.activeRenderer = renderer;\n  }\n\n  /**\n   * Render a scene using the active renderer\n   * @param scene - The scene to render\n   */\n  render(scene: Scene): void {\n    if (!this.activeRenderer) {\n      throw new Error('No active renderer available');\n    }\n    this.activeRenderer.render(scene);\n  }\n} ","import { EventService, EventHandler, EventEmitter } from '../types';\n\n/**\n * Basic event emitter implementation\n */\nclass BaseEventEmitter implements EventEmitter {\n  private handlers: Map<string, Set<EventHandler>> = new Map();\n\n  on(event: string, handler: EventHandler): void {\n    if (!this.handlers.has(event)) {\n      this.handlers.set(event, new Set());\n    }\n    this.handlers.get(event)!.add(handler);\n  }\n\n  off(event: string, handler: EventHandler): void {\n    const handlers = this.handlers.get(event);\n    if (handlers) {\n      handlers.delete(handler);\n      if (handlers.size === 0) {\n        this.handlers.delete(event);\n      }\n    }\n  }\n\n  emit(event: string, data: any): void {\n    const handlers = this.handlers.get(event);\n    if (handlers) {\n      handlers.forEach(handler => handler(data));\n    }\n  }\n}\n\n/**\n * Default implementation of EventService with namespacing support\n */\nexport class DefaultEventService extends BaseEventEmitter implements EventService {\n  private namespaces: Map<string, EventEmitter> = new Map();\n\n  /**\n   * Create a new event namespace\n   * @param name - Namespace name\n   * @returns A new event emitter for the namespace\n   */\n  createNamespace(name: string): EventEmitter {\n    if (!this.namespaces.has(name)) {\n      this.namespaces.set(name, new BaseEventEmitter());\n    }\n    return this.namespaces.get(name)!;\n  }\n} ","import { SceneService, Scene, VectorEngine, EventEmitter, Plugin, Renderer } from '../types';\n\n/**\n * Default Scene implementation\n */\nclass DefaultScene implements Scene {\n  readonly root: Node;\n  readonly plugins: Map<string, Plugin>;\n  private eventEmitter: EventEmitter;\n\n  constructor(\n    private engine: VectorEngine,\n    eventEmitter: EventEmitter\n  ) {\n    this.root = document.createElement('div'); // Temporary Node implementation\n    this.plugins = new Map();\n    this.eventEmitter = eventEmitter;\n  }\n\n  get renderer(): Renderer {\n    return this.engine.renderer as unknown as Renderer;\n  }\n\n  on(event: string, handler: (data: any) => void): void {\n    this.eventEmitter.on(event, handler);\n  }\n\n  off(event: string, handler: (data: any) => void): void {\n    this.eventEmitter.off(event, handler);\n  }\n\n  emit(event: string, data: any): void {\n    this.eventEmitter.emit(event, data);\n  }\n}\n\n/**\n * Default implementation of SceneService\n */\nexport class DefaultSceneService implements SceneService {\n  private scenes: Set<Scene> = new Set();\n  private activeScene: Scene | null = null;\n\n  constructor(private engine: VectorEngine) {}\n\n  /**\n   * Create a new scene\n   * @returns The newly created scene\n   */\n  create(): Scene {\n    const scene = new DefaultScene(this.engine, this.engine.events.createNamespace('scene'));\n    this.scenes.add(scene);\n    \n    // Set as active if it's the first scene\n    if (!this.activeScene) {\n      this.activeScene = scene;\n    }\n    \n    return scene;\n  }\n\n  /**\n   * Get the active scene\n   * @returns The active scene\n   */\n  getActive(): Scene {\n    if (!this.activeScene) {\n      throw new Error('No active scene available');\n    }\n    return this.activeScene;\n  }\n\n  /**\n   * Set the active scene\n   * @param scene - The scene to set as active\n   */\n  setActive(scene: Scene): void {\n    if (!this.scenes.has(scene)) {\n      throw new Error('Scene is not managed by this service');\n    }\n    this.activeScene = scene;\n  }\n} ","import { VectorEngine, Plugin, RendererService, EventService, SceneService } from './types';\nimport { DefaultRendererService } from './services/renderer';\nimport { DefaultEventService } from './services/events';\nimport { DefaultSceneService } from './services/scene';\n\n/**\n * Vector Graphics Engine implementation\n */\nexport class VectorEngineImpl implements VectorEngine {\n  private plugins: Map<string, Plugin> = new Map();\n  \n  readonly renderer: RendererService;\n  readonly events: EventService;\n  readonly scene: SceneService;\n  \n  constructor() {\n    this.renderer = new DefaultRendererService();\n    this.events = new DefaultEventService();\n    this.scene = new DefaultSceneService(this);\n  }\n  \n  /**\n   * Install a plugin into the engine\n   * @param plugin - The plugin to install\n   * @throws Error if plugin dependencies are not met\n   */\n  use(plugin: Plugin): void {\n    // Check dependencies\n    if (plugin.dependencies) {\n      for (const dep of plugin.dependencies) {\n        if (!this.plugins.has(dep)) {\n          throw new Error(`Plugin ${plugin.id} requires ${dep} to be installed first`);\n        }\n      }\n    }\n    \n    // Install plugin\n    plugin.install(this);\n    this.plugins.set(plugin.id, plugin);\n  }\n  \n  /**\n   * Remove a plugin from the engine\n   * @param pluginId - ID of the plugin to remove\n   */\n  remove(pluginId: string): void {\n    const plugin = this.plugins.get(pluginId);\n    if (plugin) {\n      // Check if other plugins depend on this one\n      for (const [id, p] of this.plugins) {\n        if (p.dependencies?.includes(pluginId)) {\n          throw new Error(`Cannot remove plugin ${pluginId}: plugin ${id} depends on it`);\n        }\n      }\n      \n      plugin.uninstall(this);\n      this.plugins.delete(pluginId);\n    }\n  }\n  \n  /**\n   * Get a plugin by ID\n   * @param id - Plugin ID\n   * @returns The plugin instance or null if not found\n   */\n  getPlugin<T extends Plugin>(id: string): T | null {\n    return (this.plugins.get(id) as T) || null;\n  }\n} "],"names":["CanvasRenderer","options","context","width","height","ratio","scene","node","shape","matrix","bounds","centerX","centerY","radius","point","index","SVGRenderer","viewBox","element","rect","circle","line","path","d","text","textAlign","textBaseline","Vector2D","x","y","other","scalar","len","cos","angle","sin","Matrix3x3","_values","values","tx","ty","sx","sy","a","b","result","i","j","sum","k","a00","a01","a02","a10","a11","a12","a20","a21","a22","det","b00","b01","b02","b10","b11","b12","b20","b21","b22","invDet","AbstractShape","type","origin","localBounds","b1","b2","scaleX","scaleY","originX","originY","originTransform","inverseOriginTransform","Rectangle","corners","p","transformed","xs","ys","minX","minY","maxX","maxY","scale","local","RectangleFactory","Circle","center","transformedX","transformedY","transformedRadius","worldCenter","dx","dy","distance","segments","points","CircleFactory","ShapePlugin","engine","factory","DefaultRendererService","renderer","rendererId","BaseEventEmitter","event","handler","handlers","data","DefaultEventService","name","DefaultScene","eventEmitter","DefaultSceneService","VectorEngineImpl","plugin","dep","pluginId","id"],"mappings":"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"}